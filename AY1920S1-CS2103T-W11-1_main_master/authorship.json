[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d AlgoBase"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W11-1/main[image:https://travis-ci.org/AY1920S1-CS2103T-W11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W11-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W11-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "https://app.netlify.com/sites/algobase/deploys[image:https://img.shields.io/netlify/05fde8a9-d24f-4a79-972e-0e6ea1ceb8a5?logo\u003dnetlify[Netlify Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "https://github.com/AY1920S1-CS2103T-W11-1/main/blob/master/LICENSE[image:https://img.shields.io/badge/license-MIT-blue.svg[MIT License]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Technical interviews are hard. Unless you are extraordinarily gifted, you will likely have to do tonnes of practice questions to ace them. And there are so many practice websites to choose from - Leetcode, Kattis and UVa, just to name a few. Wouldn\u0027t it be nice if you could just consolidate all those questions into a single platform? Introducing AlgoBase (AB), a one stop desktop application designed for managing algorithm problems! AlgoBase can let you establish and modify your own training plan for algorithm problems flexibly and it can save several training plans at the same time on your local storage!  Also, you can use diverse tags and search to manage your questions and training plans conveniently. More importantly, AlgoBase is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ALgoBase can get your problem management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* We would like to acknowledge the original source of the code, AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "tiuweehan": 3,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "mainClassName \u003d \u0027seedu.algobase.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    archiveName \u003d \u0027algobase.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u0027site-name\u0027: \u0027AlgoBase\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-W11-1/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "LuWenQ": 2,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "AlgoBase was developed by Team https://github.com/orgs/AY1920S1-CS2103T-W11-1/people[Team CS2103T-W11-1]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Prof. Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Lu Wenqi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::luwenq.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/LuWenQ[github]] [\u003c\u003cluwenq#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Integration + Testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d She Jiayu"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::jiayushe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/jiayushe[github]] [\u003c\u003cjiayushe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Responsibilities: Code Quality + In charge of Storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tan Yuanhong"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::le0tan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/le0tan[github]] [\u003c\u003cle0tan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Scheduling and Tracking + In charge of Models"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tiu Wee Han"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::tiuweehan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/tiuweehan[github]] [\u003c\u003ctiuweehan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Deliverables and Deadlines + In charge of UI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Yu Chenghui"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "image::seris370.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "{empty}[http://github.com/Seris370[github]] [\u003c\u003cseris370#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Responsibilities: Documentation + In charge of Logic"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "tiuweehan": 21,
      "-": 41
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-W11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Email us* : You can also reach us at `weehan [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d AlgoBase - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "By: `Team CS2103T-W11-1`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* To manage algorithmic problems and training plans faster than using Excel sheets"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |add a new problem |keep track of the problems for future usage"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |delete a problem |remove entries that I no longer need"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |find a problem by keyword |locate details of problems without having to go through the entire list"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |do advanced search on problems |locate details of problems without having to go through the entire list"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |do fuzzy search on problems |locate details of problems without having to go through the entire list"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |create custom tags |categorize problems via tags"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |add tags to problems |categorize problems via tags"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |sort problems according to difficulty |locate problems easily"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |user |add remarks to problems |have reference in the future"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |create plans containing problems |better prepare for interview"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |add tasks to a plan |better prepare for interview"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |mark tasks as complete/incomplete within plans |better prepare for interview"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |import database from \u003c\u003cjson,JSON\u003e\u003e files |easily transfer data from one computer to another"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* * *` |user |export data into JSON format |easily transfer data from one computer to another"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|`* *` |advanced user |export data into CSV format |do some manipulation/processing on the data"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "(For all use cases below, the *System* is the `AlgoBase` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 1: Add Problems"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to add a new problem by entering the name of the problem, optionally specifying the description, author, weblink, source as well as any remarks or tags."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase adds a new problem with the provided details."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful addition of new problem."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of problem added."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that an existing name already exists."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that problem was not successfully added because the name already exists."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that name is missing or format for some field(s) is invalid."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that problem was not successfully added because the format is invalid."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 2: Edit Problems"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to edit an existing problem by entering the index, followed by fields that the user intends to edit (including name, description, weblink, author, source, remark, tag, etc.)."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase edits the problem using the provided details."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful edition of the existing problem."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase updates the UI with the updated problem."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index is out of bounds."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the edition is unsuccessful because the index is out of bounds."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that no fields are provided."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that nothing is updated."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 3: Delete Problems"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to delete an existing problem by entering index."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase deletes the problem from storage."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful deletion of the existing problem."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase updates the UI with the remaining problems."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index is out of bounds."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the deletion is unsuccessful because the index is out of bounds."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 4: List Problems"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "A list of existing problems will be displayed."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests for a list of all existing problems."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase retrieves all problems in storage."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase displays in the UI the list of problems stored in AlgoBase."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects no existing problems stored."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that there is no existing problems."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 5: Find Problems"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "A list of existing problems with matching keywords in specified fields will be displayed."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to find problems by specifying keywords in certain fields."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase retrieves all problems with matching keywords in specified fields from storage."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase displays in the UI the list of problems with matching keywords in specified fields."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that no keywords in any fields are specified."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** 2a1. AlgoBase informs user that at least one constraint should be provided."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 6: Sort Problems"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "A list of problems will be displayed in a specific order provided by user."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to sort a set of problems by specifying rules of ordering."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase sorts the problem list using the provided order."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase displays the set of questions in sorted order."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that no sort order is specified."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that no sort order is given."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 7: Add Tasks to Plan"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to add a new task by entering the index of the problem and index of the plan."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase creates a new task with the specified problem."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase adds the newly created task to the specified plan."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase indicates successful addition of new task to plan."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "5.  AlgoBase displays details of task added."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index of problem is out of bounds."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the addition is unsuccessful because the index of problem is out of bounds."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 3a. AlgoBase detects that the index of plan is out of bounds."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 3a1. AlgoBase informs user that the addition is unsuccessful because the index of plan is out of bounds."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 8: Delete Tasks from Plan"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to delete an existing task by entering the index of the plan and index of the task."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase deletes the specified task from the specified plan."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates successful deletion of the existing task."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase updates the UI with the remaining tasks in the plan."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index of plan is out of bounds."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the deletion is unsuccessful because the index of plan is out of bounds."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that the index of task is out of bounds."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that the deletion is unsuccessful because the index of task is out of bounds."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 9: Mark Tasks as Done in Plan"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to mark an existing task as done by entering the index of the plan and index of the task."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase marks the specified task as done in the specified plan."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is marked as done successfully."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of the task updated."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index of plan is out of bounds."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the update is unsuccessful because the index of plan is out of bounds."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that the index of task is out of bounds."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that the update is unsuccessful because the index of task is out of bounds."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 10: Mark Tasks as Undone in Plan"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to mark an existing task as undone by entering the index of the plan and index of the task."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase marks the specified task as undone in the specified plan."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "3.  AlgoBase indicates that the existing task is marked as done successfully."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "4.  AlgoBase displays details of the task updated."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the index of plan is out of bounds."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2a1. AlgoBase informs user that the update is unsuccessful because the index of plan is out of bounds."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2b. AlgoBase detects that the index of task is out of bounds."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "** 2b1. AlgoBase informs user that the update is unsuccessful because the index of task is out of bounds."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Use Case 11: Switch between View of Items"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "1.  User requests to switch the current view of items to a different view of items."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "2.  AlgoBase displays the list of items corresponding to that view."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* 2a. AlgoBase detects that the specified view of items does not exist."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "** 2a1. AlgoBase informs user that the specified view of items does not exist."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Every change is saved immediately and no manual saving is needed."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  A user with above average typing speed for regular Unix commands should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should work on both `32-bit` and `64-bit` \u003c\u003cenvironment,environments\u003e\u003e."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should be able to hold up to 1000 problems with \u003c\u003cresponse-time,response time\u003e\u003e less than 1 second for typical usage."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should work without installation (i.e. portable)."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Should be for a single user i.e. (not a multi-user product)."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Storage file should be human interpretable and editable for someone who’s familiar with JSON."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".  Not required to store \u003c\u003csolutions,solutions to problems\u003e\u003e."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[json]] JSON::"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "JavaScript Object Notation"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[environment]] Environment::"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "An execution environment offered by mainstream OSes as defined above"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[response-time]] Response Time::"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "An execution environment offered by mainstream OSes as defined above"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "[[solutions]] Solutions to Problems::"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Source code or executable that aims to solve the corresponding problem"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: Shows the GUI with a set of sample problems. The window size may not be optimum."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Deleting Problems"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ". Deleting a problem while all problems are listed"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Prerequisites: List all problems using the `list` command. Multiple problems in the list."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: First problem is deleted from the list. Details of the deleted problem shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: No problem is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d Saving Data"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Delete the `data` folder in project root folder and launch AlgoBase. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: No errors shown. A new data file is created silently."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ".. Delete some mandatory fields in the data file located at `data/algobase.json` and launch AlgoBase. +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "   Expected: Error details shown in the status message, indicating corrupted data file."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiayushe": 295,
      "le0tan": 1,
      "tiuweehan": 14,
      "-": 390
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d AlgoBase - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "By: `Team CS2103T-W11-1`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase (AB) is for those who prefer to use a desktop app for managing algorithm problems. AlgoBase can let you establish and modify your own training plan for algorithm problems flexibly and it can save several training plans at the same time on your local storage!  Also, you can use diverse tags and search to manage your questions and training plans conveniently. More importantly, AlgoBase is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ALgoBase can get your problem management tasks done faster than traditional GUI apps. Interested? Jump to the Section 2, “Quick Start” to get started. Enjoy! :-))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".  Download the latest `algobase.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your AlgoBase application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will list all possible commands in the result window and open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *`list`* : lists all problems"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* **`add`**`n/factorial d/define a function factorial that takes in a number and n and returns the factorial of the number t/recursion a/Halim` : adds a problem called \u0027factorial\u0027 tagged with \u0027recursion\u0027 and authored by \u0027Wee Han\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/factorial t/recursion` or as `n/factorial`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/recursion`, `t/recursion t/dynamic-programming` etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME a/AUTHOR`, `a/AUTHOR n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Problems"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a problem: `add`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Generates a new problem. +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `add n/NAME [a/AUTHOR] [w/WEBLINK] [d/DESCRIPTION] [diff/DIFFICULTY] [src/SOURCE] [t/TAG]...`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `DIFFICULTY` should be an integer or decimal in the range of (0, 5] (left open right close range)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "A problem can have any number of tags (including 0)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `add n/Sequences a/Tung Kam Chuen w/https://open.kattis.com/problems/sequences d/Find the sum of the number of inversions of the 2k sequences, modulo 1000000007 (109+7). diff/3.0 src/Kattis t/recursion`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a problem : `delete`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes an existing problem. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* Deletes the problem at the specified `INDEX`."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* The index refers to the index number shown in the displayed problem list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes the 2nd problem in the displayed list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `find n/factorial` +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes the 1st problem in the results of the `find` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a problem : `edit`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits an existing problem. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `edit INDEX [d/DELETE] [n/NAME] [d/DESCRIPTION] [a/AUTHOR]  [t/TAG]...`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Edits the problem at the specified `INDEX`. The index refers to the index number shown in the displayed problem list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* When editing tags, the existing tags of the problem will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* You can remove all the problem\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `edit 1 a/John Doe +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits the author of the 1st problem to be `John Doe` respectively."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `edit 2 n/permutations t/` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits the name of the 2nd problem to be `permutations` and clears all existing tags."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Locating problems by name: `find`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Finds problems whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `find [n/NAME] [a/AUTHOR] [d/DESCRIPTION] [src/SOURCE] [diff/LOWER_BOUND-UPPER_BOUND] [t/TAG]...`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is case-insensitive and is matched by words. e.g. `henz` will match `Henz`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is matched word by word. e.g. `hello` will match `hello world` but not `helloworld`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is considered a match as long as one word matches. e.g. `Henz Ben` matches both `Martin Henz` and `Ben Leong`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Author requires an exact match."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Description"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is case-insensitive"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is matched word by word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** is considered as a match only when the problem\u0027s description includes all words in the constraint. e.g. `wordA wordB` matches `wordC wordB wordA` not `wordD wordA`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Source requires an exact match."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Tag"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Constraints are separated by spaces. (e.g. `find t/Recursion Brute-Force` will display all problems with both tag `Recursion` and `Brute-Force`)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Constraint tag set is a subset of matching problems. (e.g. `find t/Recursion Brute-Force` will match problem with tags `Recursion`+`Brute-Force`+`Playful` but not `Recursion`+`Adhoc`)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Tags are considered equal only when the tag strings are exactly matched."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Difficulty"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** matches problems with `LOWER_BOUND \u003c\u003d difficulty \u003c\u003d UPPER_BOUND`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "** Note that you should provide both bounds. If you want to match problems with exact difficulty `1.5`, please use `diff/1.5-1.5`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `find factorial` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Returns `factorial` and `Factorialize`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `find factorial permutations` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Returns any problem having names `factorial`, or `permutations`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all problems : `list`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Displays a list of all existing problems. +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting problems: `sort`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Sorts the current list of results by a specified order and direction. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `sort m/METHOD [ord/ORDER]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* Method can be `name`, `author`, `weblink`, `difficulty` or `source`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* ORDER can be `ascend` or `descend` representing ascending and descending order. The default is in ascending order."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* String-based values (i.e. `name`, `author`, etc.) are sorted alphabetically."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `sort m/name`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of problems in ascending order of names."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `sort m/author ord/descend`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of problems in descending order of author names."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `sort m/difficulty ord/ascend`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Sorts the current list of problems from lowest to highest difficulty."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Tags"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Creating new tags: `newtag`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Generates a new tag. +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `newtag n/NAME`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `newtag n/sssp`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Listing tags: `lstag`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Displays a list of all existing tags. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `lstag`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting new tags: `deletetag`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Deletes an existing tag. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `deletetag INDEX`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `deletetag 1`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Training Plans"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a new training plan `addplan`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Generates a new training plan. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `addplan n/NAME`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `addplan n/CS2040`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a training plan `editplan`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Edits an existing training plan. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `editplan INDEX [a/ADD_PROBLEM_INDEX_LIST] [d/DELETE_PROBLEM_INDEX_LIST] [n/NAME]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `editplan 1 a/1 2 3 d/4 5 6 n/training set 1`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Locating training plans by name: `findplan`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Finds problems whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `findplan KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `find training-set` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Returns `training-set-1` and `training-set-2`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `find training set` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Returns any problem having names `training`, or `set`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Seris370"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all training plans: `listplan`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Displays a list of all existing plans alphabetically. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Seris370"
        },
        "content": "Format: `listplan`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a new task to a plan: `addtask`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Adds a task to a specified plan. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `addtask plan/PLAN_INDEX prob/PROBLEM_INDEX`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `addtask plan/1 prob/1`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a task from a plan: `deletetask`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Deletes a specified task from a specified plan. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `deletetask plan/PLAN_INDEX task/TASK_INDEX`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `deletetask plan/1 task/1`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Marking a task as done: `donetask`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Marks a specified task in a specified plan as done. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `donetask plan/PLAN_INDEX task/TASK_INDEX`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `donetask plan/1 task/1`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003d\u003d\u003d\u003d Marking a task as undone: `undonetask`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Marks a specified task in a specified plan as undone. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Format: `undone plan/PLAN_INDEX prob/TASK_INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* `undonetask plan/1 task/1`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Importing and Exporting data"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Importing data: `import`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Imports external data of a specified format (e.g. CSV, JSON) into local storage. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `import f/FORMAT p/PATH`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Format can be ‘CSV’ or ‘JSON’."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Directory refers to the full path of the output file."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `import t/plan p/./steven_halim_secret.json`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Exporting data: `export`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Exports data into a specified format (e.g. CSV, JSON). +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `export f/FORMAT p/DIRECTORY`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Format can be ‘CSV’ or ‘JSON’."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* Directory refers to the full path of the output file."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `export f/csv p/./`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Encryption"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Switching tabs : `switch`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Switches to a tab display in the application. +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Format: `switch INDEX`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* `switch 1`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Switches to the tab at index 1."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "le0tan"
        },
        "content": "List all possible commands or find command usage using the command word. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Format: `help [COMMAND_WORD]`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Shows all possible commands."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "le0tan"
        },
        "content": "* `help add`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "le0tan"
        },
        "content": "Shows command usage for `add` command."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "Clears all entries from AlgoBase. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AlgoBase folder."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Add* `add n/NAME [d/DESCRIPTION] [a/AUTHOR] [t/TAG]...` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `add  n/factorial d/define a function factorial that takes in a number n and returns the factorial of the number t/recursion a/Wee Han`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *List* : `list` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "* *Edit* : `edit INDEX [d/DESCRIPTION] [a/AUTHOR] [t/TAG]...` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `edit 2 n/permutations t/`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `find factorial permutations`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Sort* : `sort m/METHOD [d/DIRECTION]` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `sort m/alphabetical d/ASC`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *New Tag* : `newtag n/NAME` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `newtag n/sssp`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *List Tags* : `lstag`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Delete Tag* : `deletetag INDEX` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `deletetag 3`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Add Training Plan* : `addplan n/NAME [d/DESCRIPTION] [s/START_DATE] [e/END_DATE]` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `addplan n/CS2040`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *Edit Training Plan* : `editplan INDEX [a/ADD_PROBLEM_INDEX_LIST] [d/DELETE_PROBLEM_INDEX_LIST] [n/NAME] [d/DESCRIPTION] [s/START_DATE] [e/END_DATE]` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "e.g. `editplan 1 a/1 2 3 d/4 5 6 n/training set 1`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Find Training Plan* : `findplan KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `find training set`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Seris370"
        },
        "content": "* *List Training Plans* : `listplan`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Mark Training Plan as done* : `done PLAN_INDEX PROBLEM_INDEX` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `done 1 2`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Mark Training Plan as undone* : `undone PLAN_INDEX PROBLEM_INDEX` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `undone 1 2`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Importing data* : `import f/FORMAT p/PATH` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `import t/plan p/./steven_halim_secret.json`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Exporting data* : `export f/FORMAT p/DIRECTORY` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "e.g. `export f/csv p/./`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiayushe": 53,
      "Seris370": 5,
      "tiuweehan": 170,
      "le0tan": 40,
      "-": 100
    }
  },
  {
    "path": "docs/team/jiayushe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d She Jiayu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 61
    }
  },
  {
    "path": "docs/team/le0tan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Tan Yuanhong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/luwenq.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Lu Wen Qi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/seris370.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Yu Chenghui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/team/tiuweehan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d Tiu Wee Han - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003d\u003d PROJECT: AlgoBase"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "AlgoBase is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "-": 60
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "-": 416
    }
  },
  {
    "path": "src/main/java/seedu/algobase/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/algobase/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.AlgoBaseStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.JsonAlgoBaseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AlgoBase ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        AlgoBaseStorage algoBaseStorage \u003d new JsonAlgoBaseStorage(userPrefs.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        storage \u003d new StorageManager(algoBaseStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s algobase and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The data from the sample algobase will be used instead if {@code storage}\u0027s algobase is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * or an empty algobase will be used instead if errors occur when reading {@code storage}\u0027s algobase."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Optional\u003cReadOnlyAlgoBase\u003e algoBaseOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ReadOnlyAlgoBase initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            algoBaseOptional \u003d storage.readAlgoBase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (!algoBaseOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AlgoBase\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            initialData \u003d algoBaseOptional.orElseGet(SampleDataUtil::getSampleAlgoBase);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AlgoBase\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            initialData \u003d new AlgoBase();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AlgoBase\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            initialData \u003d new AlgoBase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AlgoBase\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.info(\"Starting AlgoBase \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping AlgoBase ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String LOG_FILE \u003d \"algobase.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_PLAN_DISPLAYED_INDEX \u003d \"The Plan index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX \u003d \"The Problem index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The Task index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_PROBLEMS_LISTED_OVERVIEW \u003d \"%1$d problems listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_FORMAT \u003d \"Invalid tag format! \\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_DISPLAYED_INDEX \u003d \"The Tag index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_PLANS_LISTED_OVERVIEW \u003d \"%1$d plans listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_NAME \u003d \"Command %1$s not found!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "Seris370": 1,
      "le0tan": 1,
      "LuWenQ": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static String getClassStringField(Class targetClass, String fieldName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String result \u003d (String) targetClass.getField(fieldName).get(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (NoSuchFieldException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new AssertionError(\"Class \" + targetClass.getName()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + \"doesn\u0027t have \" + fieldName + \" field.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new AssertionError(\"Class \" + targetClass.getName()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + \"has non-public \" + fieldName + \".\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 13,
      "LuWenQ": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isArrayOfLength(Object[] array, int length) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return array.length \u003d\u003d length;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 4,
      "LuWenQ": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/algobase/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.GuiState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the AlgoBase."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see seedu.algobase.model.Model#getAlgoBase()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ReadOnlyAlgoBase getAlgoBase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the current state of the GUI."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    GuiState getGuiState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns an unmodifiable view of the processed list of problems."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ObservableList\u003cProblem\u003e getProcessedProblemList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tags */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of plans */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    ObservableList\u003cPlan\u003e getProcessedPlanList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cTask\u003e getProcessedTaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the user prefs\u0027 algobase file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "Seris370": 4,
      "tiuweehan": 9,
      "LuWenQ": 18,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.AlgoBaseParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.GuiState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final AlgoBaseParser algoBaseParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBaseParser \u003d new AlgoBaseParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Command command \u003d algoBaseParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            storage.saveAlgoBase(model.getAlgoBase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getAlgoBase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getGuiState();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getFilteredTagList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getProcessedProblemList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getFilteredProblemList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public ObservableList\u003cPlan\u003e getProcessedPlanList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return model.getFilteredPlanList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getProcessedTaskList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return model.getCurrentTaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 10,
      "Seris370": 6,
      "tiuweehan": 1,
      "le0tan": 1,
      "LuWenQ": 31,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Adds a Problem to the algobase."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a Problem to the algobase.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_WEBLINK + \"WEBLINK \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_SOURCE + \"SOURCE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_NAME + \"Sequences \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_AUTHOR + \"Tung Kam Chuen\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_WEBLINK + \"https://open.kattis.com/problems/sequences\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Find the sum of the number of inversions of the 2k sequences, modulo 1000000007 (109+7).\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DIFFICULTY + \"3.0 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_SOURCE + \"Kattis\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Problem added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROBLEM \u003d \"This Problem already exists in the algobase\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Problem toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Problem}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AddCommand(Problem problem) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        toAdd \u003d problem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (model.hasProblem(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROBLEM);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addProblem(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addTags(toAdd.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 10,
      "Seris370": 11,
      "LuWenQ": 19,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Adds a Plan to AlgoBase."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class AddPlanCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addplan\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a Plan to the algobase.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_END_DATE + \"END_DATE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_NAME + \"CS2040 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"past year questions of CS2040 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_START_DATE + \"2019/01/01\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_END_DATE + \"3019/12/12\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Plan added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLAN \u003d \"A plan of this name already exists in the algobase.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Plan toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Plan}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public AddPlanCommand(Plan plan) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(plan);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        toAdd \u003d plan;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (model.hasPlan(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PLAN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.addPlan(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof AddPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPlanCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "Seris370": 62
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Adds a Tag to the algobase."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtag\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Tag to the algobase. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + PREFIX_TAG + \"TAG NAME\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"Easy\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Tag added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This Tag already exists in the algobase.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates an AddTagCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AddTagCommand(Tag tag) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        toAdd \u003d tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (model.hasTag(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addTag(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof AddTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTagCommand) other).toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PROBLEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Adds a Task to a Plan."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtask\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Adds a task to a training plan.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PROBLEM + \"PROBLEM_INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PROBLEM + \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task %1$s added to plan %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final AddTaskDescriptor addTaskDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates an AddTaskCommand to add a {@code Task} to the specified {@code Plan}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param addTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public AddTaskCommand(AddTaskDescriptor addTaskDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(addTaskDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.addTaskDescriptor \u003d addTaskDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cProblem\u003e lastShownProblemList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (addTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (addTaskDescriptor.problemIndex.getZeroBased() \u003e\u003d lastShownProblemList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan plan \u003d lastShownPlanList.get(addTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Problem problem \u003d lastShownProblemList.get(addTaskDescriptor.problemIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task task \u003d new Task(problem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(plan.getTasks());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.createUpdatedPlan(plan, taskSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(plan, updatedPlan);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, task, updatedPlan));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 addTaskDescriptor.equals(((AddTaskCommand) other).addTaskDescriptor));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class AddTaskDescriptor {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index problemIndex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public AddTaskDescriptor(Index planIndex, Index problemIndex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.problemIndex \u003d problemIndex;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof AddTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((AddTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 problemIndex.equals(((AddTaskDescriptor) other).problemIndex));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 103
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Clears the algobase."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"AlgoBase has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setAlgoBase(new AlgoBase());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Class[] COMMAND_LIST \u003d {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddCommand.class,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddPlanCommand.class,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AddTagCommand.class,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ClearCommand.class,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteCommand.class,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeletePlanCommand.class,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteTagCommand.class,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DeleteTaskCommand.class,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DoneTaskCommand.class,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        EditCommand.class,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        EditPlanCommand.class,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        EditTagCommand.class,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ExitCommand.class,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand.class,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindPlanCommand.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand.class,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ListCommand.class,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ListPlanCommand.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ListTagCommand.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SwitchCommand.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        UndoneTaskCommand.class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 34,
      "LuWenQ": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return \"[CommandResult]: \" + feedbackToUser;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 4,
      "LuWenQ": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Deletes a Problem identified using it\u0027s displayed index from the algobase."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": Deletes the Problem identified by the index number used in the displayed Problem list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DELETE_PROBLEM_SUCCESS \u003d \"Deleted Problem: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cProblem\u003e lastShownList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem problemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.deleteProblem(problemToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROBLEM_SUCCESS, problemToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeletePlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Deletes a Plan from AlgoBase."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class DeletePlanCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteplan\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \": Deletes the Plan identified by the index number used in the displayed Plan list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_DELETE_PLAN_SUCCESS \u003d \"Deleted Plan: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public DeletePlanCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan planToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.deletePlan(planToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PLAN_SUCCESS, planToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof DeletePlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePlanCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 54
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeleteTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Deletes a Tag identified using it\u0027s displayed index from the algobase."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DeleteTagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \": Deletes the Tag identified by the index number used in the displayed Tag list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DeleteTagCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cTag\u003e lastShownList \u003d model.getFilteredTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tagToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.deleteTag(tagToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.deleteTags(tagToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof DeleteTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTagCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 54
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Deletes a Task identified using its index in the Plan and the Plan index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetask\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Deletes the Task identified by the index in the plan.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final DeleteTaskDescriptor deleteTaskDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a DeleteTaskCommand to delete a {@code Task} in the specified {@code Plan}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param deleteTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DeleteTaskCommand(DeleteTaskDescriptor deleteTaskDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.deleteTaskDescriptor \u003d deleteTaskDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (deleteTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(deleteTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(planToUpdate.getTasks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task task \u003d taskList.get(deleteTaskDescriptor.taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(deleteTaskDescriptor.taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.createUpdatedPlan(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, task));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 deleteTaskDescriptor.equals(((DeleteTaskCommand) other).deleteTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class DeleteTaskDescriptor {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public DeleteTaskDescriptor(Index planIndex, Index problemIndex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d problemIndex;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DeleteTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((DeleteTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((DeleteTaskDescriptor) other).taskIndex));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 95
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/DoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Marks a Task identified using its index in the Plan and the Plan index as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"donetask\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Marks the Task identified by the index as done in the plan.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Marked Task as done: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final DoneTaskDescriptor doneTaskDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a DoneTaskCommand to mark a {@code Task} as done in the specified {@code Plan}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param doneTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DoneTaskCommand(DoneTaskDescriptor doneTaskDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.doneTaskDescriptor \u003d doneTaskDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (doneTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(doneTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(planToUpdate.getTasks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task task \u003d taskList.get(doneTaskDescriptor.taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(doneTaskDescriptor.taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(new Task(task.getProblem(), true));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.createUpdatedPlan(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, task));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DoneTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 doneTaskDescriptor.equals(((DoneTaskCommand) other).doneTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class DoneTaskDescriptor {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public DoneTaskDescriptor(Index planIndex, Index problemIndex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d problemIndex;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof DoneTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((DoneTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((DoneTaskDescriptor) other).taskIndex));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 96
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PROBLEMS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Edits the details of an existing Problem in the algobase."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Edits the details of the Problem identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"by the index number used in the displayed Problem list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_WEBLINK + \"WEBLINK] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"[\" + PREFIX_SOURCE + \"SOURCE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_AUTHOR + \"Tung Kam Chuen \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_WEBLINK + \"https://open.kattis.com/problems/sequences\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_EDIT_PROBLEM_SUCCESS \u003d \"Edited Problem: %1$s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROBLEM \u003d \"This Problem already exists in the algobase.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final EditProblemDescriptor editProblemDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param index of the Problem in the filtered Problem list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param editProblemDescriptor details to edit the Problem with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditCommand(Index index, EditProblemDescriptor editProblemDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(editProblemDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.editProblemDescriptor \u003d new EditProblemDescriptor(editProblemDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cProblem\u003e lastShownList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem problemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem editedProblem \u003d createEditedProblem(problemToEdit, editProblemDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!problemToEdit.isSameProblem(editedProblem) \u0026\u0026 model.hasProblem(editedProblem)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROBLEM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setProblem(problemToEdit, editedProblem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.addTags(editProblemDescriptor.tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PROBLEM_SUCCESS, editedProblem));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates and returns a {@code Problem} with the details of {@code problemToEdit}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * edited with {@code editProblemDescriptor}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static Problem createEditedProblem(Problem problemToEdit, EditProblemDescriptor editProblemDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assert problemToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Name updatedName \u003d editProblemDescriptor.getName().orElse(problemToEdit.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Author updatedAuthor \u003d editProblemDescriptor.getAuthor().orElse(problemToEdit.getAuthor());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        WebLink updatedWebLink \u003d editProblemDescriptor.getWebLink().orElse(problemToEdit.getWebLink());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Description updatedDescription \u003d editProblemDescriptor.getDescription().orElse(problemToEdit.getDescription());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editProblemDescriptor.getTags().orElse(problemToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Difficulty updatedDifficulty \u003d editProblemDescriptor.getDifficulty().orElse(problemToEdit.getDifficulty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Remark updatedRemark \u003d editProblemDescriptor.getRemark().orElse(problemToEdit.getRemark());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Source updatedSource \u003d editProblemDescriptor.getSource().orElse(problemToEdit.getSource());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Problem(updatedName, updatedAuthor, updatedWebLink, updatedDescription, updatedTags,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                updatedDifficulty, updatedRemark, updatedSource);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 editProblemDescriptor.equals(e.editProblemDescriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Stores the details to edit the Problem with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * corresponding field value of the Problem."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static class EditProblemDescriptor {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        private WebLink webLink;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private Difficulty difficulty;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private Source source;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public EditProblemDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public EditProblemDescriptor(EditProblemDescriptor toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            setWebLink(toCopy.webLink);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setDifficulty(toCopy.difficulty);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setSource(toCopy.source);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public void setWebLink(WebLink webLink) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            this.webLink \u003d webLink;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public Optional\u003cWebLink\u003e getWebLink() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.ofNullable(webLink);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(difficulty);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setSource(Source source) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.source \u003d source;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cSource\u003e getSource() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(source);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (!(other instanceof EditProblemDescriptor)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            EditProblemDescriptor e \u003d (EditProblemDescriptor) other;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u0026\u0026 getWebLink().equals(e.getWebLink())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 10,
      "Seris370": 2,
      "le0tan": 44,
      "LuWenQ": 83,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/EditPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Edits the details of an existing Plan in the algobase."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class EditPlanCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editplan\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Plan identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"by the index number used in the displayed Plan list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END_DATE]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_DESCRIPTION + \"future questions of CS2040 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_START_DATE + \"2019/01/01\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + PREFIX_END_DATE + \"3019/12/12\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_EDIT_PLAN_SUCCESS \u003d \"Edited Plan: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PLAN \u003d \"A plan of this name already exists in the algobase.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final EditPlanDescriptor editPlanDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param index of the Plan in the filtered Plan list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @param editPlanDescriptor details to edit the Plan with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public EditPlanCommand(Index index, EditPlanDescriptor editPlanDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(editPlanDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.editPlanDescriptor \u003d new EditPlanDescriptor(editPlanDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        List\u003cPlan\u003e lastShownList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan planToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan editedPlan \u003d createEditedPlan(planToEdit, editPlanDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!planToEdit.isSamePlan(editedPlan) \u0026\u0026 model.hasPlan(editedPlan)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PLAN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.setPlan(planToEdit, editedPlan);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PLAN_SUCCESS, editedPlan));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Creates and returns a {@code Plan} with the details of {@code planToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * edited with {@code editPlanDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static Plan createEditedPlan(Plan planToEdit, EditPlanDescriptor editPlanDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        assert planToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanName updatedName \u003d editPlanDescriptor.getPlanName().orElse(planToEdit.getPlanName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanDescription updatedDescription \u003d editPlanDescriptor.getPlanDescription().orElse("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                planToEdit.getPlanDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        LocalDateTime startDate \u003d editPlanDescriptor.getStartDate().orElse(planToEdit.getStartDate());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        LocalDateTime endDate \u003d editPlanDescriptor.getEndDate().orElse(planToEdit.getEndDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Set\u003cTask\u003e tasks \u003d editPlanDescriptor.getTasks().orElse(planToEdit.getTasks());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new Plan(updatedName, updatedDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!(other instanceof EditPlanCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        EditPlanCommand e \u003d (EditPlanCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 editPlanDescriptor.equals(e.editPlanDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Stores the details to edit the Plan with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * corresponding field value of the Plan."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static class EditPlanDescriptor {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private PlanName name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private PlanDescription description;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private LocalDateTime startDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private LocalDateTime endDate;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        private Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public EditPlanDescriptor() {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public EditPlanDescriptor(EditPlanDescriptor toCopy) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setPlanName(toCopy.name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setPlanDescription(toCopy.description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            setTasks(toCopy.tasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setPlanName(PlanName name) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cPlanName\u003e getPlanName() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setPlanDescription(PlanDescription description) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cPlanDescription\u003e getPlanDescription() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getStartDate() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getEndDate() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Sets {@code tasks} to this object\u0027s {@code tasks}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * A defensive copy of {@code tasks} is used internally."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public void setTasks(Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            this.tasks \u003d (tasks !\u003d null) ? new HashSet\u003c\u003e(tasks) : null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Returns an unmodifiable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tasks} is null."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Seris370"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public Optional\u003cSet\u003cTask\u003e\u003e getTasks() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return (tasks !\u003d null) ? Optional.of(Collections.unmodifiableSet(tasks)) : Optional.empty();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (!(other instanceof EditPlanDescriptor)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            EditPlanDescriptor e \u003d (EditPlanDescriptor) other;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return getPlanName().equals(e.getPlanName())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getPlanDescription().equals(e.getPlanDescription())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    \u0026\u0026 getTasks().equals(e.getTasks());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "Seris370": 226
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/EditTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Edits the details of an existing Tag in the algobase."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class EditTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Tag identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"by the index number used in the displayed Tag list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG + \"Easy\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Edited Tag: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This Tag already exists in the algobase.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param index of the Tag in the filtered Tag list to edit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param name details to edit the Tag with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditTagCommand(Index index, String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        List\u003cTag\u003e lastShownList \u003d model.getFilteredTagList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tagToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag editedTag \u003d createEditedTag(tagToEdit, name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!tagToEdit.isSameTag(editedTag) \u0026\u0026 model.hasTag(editedTag)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setTag(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.setTags(tagToEdit, editedTag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, editedTag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param tagToEdit tag that need to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param name new tag name for tagToEdit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @return Tag with updated name."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static Tag createEditedTag(Tag tagToEdit, String name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assert tagToEdit !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assert name !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String updatedName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        updatedName \u003d name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Tag(updatedName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof EditTagCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        EditTagCommand e \u003d (EditTagCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 name.equals(e.name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 99
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting AlgoBase as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.problem.AuthorMatchesKeywordPredicate.DEFAULT_AUTHOR_PREDICATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.problem.DescriptionContainsKeywordsPredicate.DEFAULT_DESCRIPTION_PREDICATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.problem.DifficultyIsInRangePredicate.DEFAULT_DIFFICULTY_PREDICATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.problem.NameContainsKeywordsPredicate.DEFAULT_NAME_PREDICATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.problem.SourceMatchesKeywordPredicate.DEFAULT_SOURCE_PREDICATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.model.problem.TagIncludesKeywordsPredicate.DEFAULT_TAG_PREDICATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Finds and lists all problems in algobase fulfilling all the given constraints."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Finds a problem by name, author, and/or \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"description and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_SOURCE + \"SOURCE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"LOWER_BOUND-UPPER_BOUND] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_AUTHOR + \"Tung Kam Chuen\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_NO_CONSTRAINTS \u003d \"At least one search constraint should be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code ALWAYS_TRUE_PROBLEM_PREDICATE} is a non-restrictive predicate that always returns true, which"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * is used as a placeholder for predicates not provided by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final Predicate\u003cProblem\u003e ALWAYS_TRUE_PROBLEM_PREDICATE \u003d problem -\u003e true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Predicate\u003cProblem\u003e predicate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public FindCommand(FindProblemDescriptor findProblemDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(findProblemDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.predicate \u003d createFindProblemPredicate(findProblemDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredProblemList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                String.format(Messages.MESSAGE_PROBLEMS_LISTED_OVERVIEW, model.getFilteredProblemList().size()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Creates and returns a {@code findProblemPredicate} with the details of {@code findProblemDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static Predicate\u003cProblem\u003e createFindProblemPredicate(FindProblemDescriptor findProblemDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(findProblemDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.getNamePredicate().orElse(DEFAULT_NAME_PREDICATE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate authorPredicate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.getAuthorPredicate().orElse(DEFAULT_AUTHOR_PREDICATE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate descriptionPredicate \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.getDescriptionPredicate().orElse(DEFAULT_DESCRIPTION_PREDICATE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate sourcePredicate \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.getSourcePredicate().orElse(DEFAULT_SOURCE_PREDICATE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate difficultyPredicate \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.getDifficultyPredicate().orElse(DEFAULT_DIFFICULTY_PREDICATE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate tagPredicate \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.getTagPredicate().orElse(DEFAULT_TAG_PREDICATE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return namePredicate"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(authorPredicate)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(descriptionPredicate)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(sourcePredicate)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(difficultyPredicate)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            .and(tagPredicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Stores the details to find the {@code Problem}. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * corresponding field value of the {@code findProblemPredicate}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static class FindProblemDescriptor {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private NameContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private AuthorMatchesKeywordPredicate authorPredicate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private DescriptionContainsKeywordsPredicate descriptionPredicate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private SourceMatchesKeywordPredicate sourcePredicate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private DifficultyIsInRangePredicate difficultyPredicate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private TagIncludesKeywordsPredicate tagPredicate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public FindProblemDescriptor() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // Default constructor as empty"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public FindProblemDescriptor(FindProblemDescriptor toCopy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setNamePredicate(toCopy.namePredicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setAuthorPredicate(toCopy.authorPredicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setDescriptionPredicate(toCopy.descriptionPredicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setSourcePredicate(toCopy.sourcePredicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setDifficultyPredicate(toCopy.difficultyPredicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            setTagPredicate(toCopy.tagPredicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public boolean isAnyFieldProvided() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(namePredicate, authorPredicate, descriptionPredicate, sourcePredicate,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                difficultyPredicate, tagPredicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setNamePredicate(NameContainsKeywordsPredicate nameContainsKeywordsPredicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.namePredicate \u003d nameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cNameContainsKeywordsPredicate\u003e getNamePredicate() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(namePredicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setAuthorPredicate(AuthorMatchesKeywordPredicate authorPredicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.authorPredicate \u003d authorPredicate;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cAuthorMatchesKeywordPredicate\u003e getAuthorPredicate() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(authorPredicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setDescriptionPredicate(DescriptionContainsKeywordsPredicate descriptionPredicate) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.descriptionPredicate \u003d descriptionPredicate;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cDescriptionContainsKeywordsPredicate\u003e getDescriptionPredicate() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(descriptionPredicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setSourcePredicate(SourceMatchesKeywordPredicate sourcePredicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.sourcePredicate \u003d sourcePredicate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cSourceMatchesKeywordPredicate\u003e getSourcePredicate() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(sourcePredicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setDifficultyPredicate(DifficultyIsInRangePredicate difficultyPredicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.difficultyPredicate \u003d difficultyPredicate;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cDifficultyIsInRangePredicate\u003e getDifficultyPredicate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(difficultyPredicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void setTagPredicate(TagIncludesKeywordsPredicate tagPredicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.tagPredicate \u003d tagPredicate;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public Optional\u003cTagIncludesKeywordsPredicate\u003e getTagPredicate() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return Optional.ofNullable(tagPredicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (!(other instanceof FindProblemDescriptor)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            FindProblemDescriptor e \u003d (FindProblemDescriptor) other;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return getNamePredicate().equals(e.getNamePredicate())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 getAuthorPredicate().equals(e.getAuthorPredicate())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 getDescriptionPredicate().equals(e.getDescriptionPredicate())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 getSourcePredicate().equals(e.getSourcePredicate())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 getDifficultyPredicate().equals(e.getDifficultyPredicate())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 getTagPredicate().equals(e.getTagPredicate());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6,
      "le0tan": 170,
      "LuWenQ": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/FindPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Finds and lists all plans in algobase whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class FindPlanCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findplan\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Finds all plans whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.updateFilteredPlanList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                String.format(Messages.MESSAGE_PLANS_LISTED_OVERVIEW, model.getFilteredPlanList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof FindPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPlanCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "Seris370": 42
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.getClassStringField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"Parameter:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"COMMAND_NAME (can be empty if you want a list of possible commands)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final boolean isListAllCommands;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Class commandClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public HelpCommand(Class commandClass, boolean isListAllCommands) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.isListAllCommands \u003d isListAllCommands;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!isListAllCommands) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(commandClass);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.commandClass \u003d commandClass;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean isListAllCommands() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return isListAllCommands;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Class getCommandClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return commandClass;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (isListAllCommands) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            List\u003cString\u003e commandWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (Class command : Command.COMMAND_LIST) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                commandWords.add(getClassStringField(command, \"COMMAND_WORD\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String commandPrompt \u003d \"Available commands are: \" + commandWords.toString() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + \"More information can be found in the popup window.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new CommandResult(commandPrompt, true, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String commandUsage \u003d getClassStringField(commandClass, \"MESSAGE_USAGE\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new CommandResult(commandUsage, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(other instanceof HelpCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand h \u003d (HelpCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return isListAllCommands \u003d\u003d h.isListAllCommands()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            \u0026\u0026 commandClass.equals(h.getCommandClass());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "le0tan": 60,
      "LuWenQ": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PROBLEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Lists all problems in the algobase to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all problems\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ListPlanCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_PLANS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Lists all plans in the algobase to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class ListPlanCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listplan\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all plans\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        model.updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/ListTagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Lists all tags in the algobase to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ListTagCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listtag\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tags\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + model.getFilteredTagList().toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_METHOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Sort Problems in the Problem list view."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Possible sorting methods for {@code SortCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public enum SortingMethod {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byAuthor,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byWebLink,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        byDifficulty,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        bySource;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Sorting method should be one of \\\"name\\\", \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + \"\\\"author\\\", \\\"weblink\\\", \\\"difficulty\\\" or \\\"source\\\"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Possible sorting orders for {@code SortCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public enum SortingOrder {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ascend,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        descend;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Sorting order should be either \\\"ascend\\\" or \\\"descend\\\"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Sorts the current view in a certain order. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_METHOD + \"SORTING_METHOD \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_ORDER + \"SORTING_ORDER\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_METHOD + \"name \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            + PREFIX_SORTING_ORDER + \"ascend\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"AlgoBase has been sorted!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_NAME_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getName().compareTo(o2.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_AUTHOR_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getAuthor().compareTo(o2.getAuthor());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_DIFFICULTY_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getDifficulty().compareTo(o2.getDifficulty());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_SOURCE_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getSource().compareTo(o2.getSource());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Comparator\u003cProblem\u003e PROBLEM_WEB_LINK_COMPARATOR \u003d new Comparator\u003cProblem\u003e() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public int compare(Problem o1, Problem o2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (o1 \u003d\u003d o2) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return o1.getWebLink().compareTo(o2.getWebLink());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final SortingMethod method;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final boolean sortByAscendingOrder;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SortCommand(SortingMethod method, SortingOrder order) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(method, order);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.method \u003d method;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case ascend:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.sortByAscendingOrder \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case descend:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            this.sortByAscendingOrder \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalArgumentException(\"SortingOrder can be either ascend or descend\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (this.method) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byName:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_NAME_COMPARATOR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_NAME_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byAuthor:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_AUTHOR_COMPARATOR);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_AUTHOR_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byDifficulty:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_DIFFICULTY_COMPARATOR);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_DIFFICULTY_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case bySource:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_SOURCE_COMPARATOR);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_SOURCE_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case byWebLink:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (sortByAscendingOrder) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_WEB_LINK_COMPARATOR);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                model.updateSortedProblemList(PROBLEM_WEB_LINK_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalArgumentException(\"Sorting method doesn\u0027t exist.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "le0tan": 169
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/SwitchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Switch tabs in the GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to tab %1$s!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \": Switches the current display tab in the GUI\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \"by the index number of the current tab.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"There is no tab at index %1$s!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public SwitchCommand(Index displayTabIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        requireNonNull(displayTabIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.index \u003d displayTabIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            model.getGuiState().setDisplayTabPaneIndex(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, index.getOneBased()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (IndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_INDEX, index.getOneBased()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 5,
      "tiuweehan": 35
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/UndoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Marks a Task identified using its index in the Plan and the Plan index as undone."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class UndoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undonetask\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \": Marks the Task identified by the index as undone in the plan.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"PLAN_INDEX\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"TASK_INDEX\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_PLAN + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            + PREFIX_TASK + \"10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_UNDONE_TASK_SUCCESS \u003d \"Marked Task as undone: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final UndoneTaskDescriptor undoneTaskDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates a UndoneTaskCommand to mark a {@code Task} as undone in the specified {@code Plan}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param undoneTaskDescriptor details of the plan and problem involved"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public UndoneTaskCommand(UndoneTaskDescriptor undoneTaskDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.undoneTaskDescriptor \u003d undoneTaskDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cPlan\u003e lastShownPlanList \u003d model.getFilteredPlanList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (undoneTaskDescriptor.planIndex.getZeroBased() \u003e\u003d lastShownPlanList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan planToUpdate \u003d lastShownPlanList.get(undoneTaskDescriptor.planIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(planToUpdate.getTasks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Task task \u003d taskList.get(undoneTaskDescriptor.taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskList.remove(undoneTaskDescriptor.taskIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e taskSet \u003d new HashSet\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskSet.add(new Task(task.getProblem(), false));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan updatedPlan \u003d Plan.createUpdatedPlan(planToUpdate, taskSet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        model.setPlan(planToUpdate, updatedPlan);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNDONE_TASK_SUCCESS, task));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof UndoneTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 undoneTaskDescriptor.equals(((UndoneTaskCommand) other).undoneTaskDescriptor)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Stores the details of the plan and problem involved."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static class UndoneTaskDescriptor {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index planIndex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        private Index taskIndex;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public UndoneTaskDescriptor(Index planIndex, Index problemIndex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.planIndex \u003d planIndex;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            this.taskIndex \u003d problemIndex;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof UndoneTaskDescriptor // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 planIndex.equals(((UndoneTaskDescriptor) other).planIndex)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 taskIndex.equals(((UndoneTaskDescriptor) other).taskIndex));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 96
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_WEBLINK, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_TAG, PREFIX_DIFFICULTY, PREFIX_REMARK, PREFIX_SOURCE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Author author;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_AUTHOR)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            author \u003d Author.DEFAULT_AUTHOR;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        WebLink webLink;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_WEBLINK)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            webLink \u003d ParserUtil.parseWeblink(argMultimap.getValue(PREFIX_WEBLINK).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            webLink \u003d WebLink.DEFAULT_WEBLINK;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d Description.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Difficulty difficulty;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DIFFICULTY)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            difficulty \u003d Difficulty.DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Remark remark;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            remark \u003d Remark.DEFAULT_REMARK;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Source source;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_SOURCE)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            source \u003d ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            source \u003d Source.DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem problem \u003d new Problem(name, author, webLink, description, tagList, difficulty, remark, source);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new AddCommand(problem);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 47,
      "le0tan": 18,
      "tiuweehan": 5,
      "LuWenQ": 7,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.AddPlanCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new AddPlanCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class AddPlanCommandParser implements Parser\u003cAddPlanCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPlanCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns an AddPlanCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public AddPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanName name \u003d ParserUtil.parsePlanName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanDescription description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d ParserUtil.parsePlanDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            description \u003d PlanDescription.DEFAULT_PLAN_DESCRIPTION;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_START_DATE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            startDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        LocalDateTime endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_END_DATE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            endDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Set\u003cTask\u003e tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // TODO: implementation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Plan plan \u003d new Plan(name, description, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new AddPlanCommand(plan);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 80
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AddTagCommandParser implements Parser\u003cAddTagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * and returns an AddTagCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AddTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tag \u003d new ParserUtil().parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new AddTagCommand(tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 1,
      "LuWenQ": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PROBLEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns an AddTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_PROBLEM);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !arePrefixesPresent(argMultimap, PREFIX_PROBLEM)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index problemIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            problemIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PROBLEM).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand.AddTaskDescriptor addTaskDescriptor \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new AddTaskCommand.AddTaskDescriptor(planIndex, problemIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new AddTaskCommand(addTaskDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 60
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/AlgoBaseParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.AddPlanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.DeletePlanCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.EditPlanCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.FindPlanCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.ListPlanCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.ListTagCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.UndoneTaskCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AlgoBaseParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        //Problem"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        //Plan"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case AddPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new AddPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DeletePlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DeletePlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case EditPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new EditPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case FindPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new FindPlanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case ListPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ListPlanCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        //Task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case DoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new DoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case UndoneTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new UndoneTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        //Util"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        case AddTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return new AddTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        case DeleteTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return new DeleteTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        case ListTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return new ListTagCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        case EditTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return new EditTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 40,
      "Seris370": 6,
      "le0tan": 3,
      "tiuweehan": 3,
      "LuWenQ": 30,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Prefix PREFIX_WEBLINK \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"diff/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_SOURCE \u003d new Prefix(\"src/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_SORTING_METHOD \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Prefix PREFIX_SORTING_ORDER \u003d new Prefix(\"ord/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PLAN \u003d new Prefix(\"plan/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_PROBLEM \u003d new Prefix(\"prob/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"task/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 3,
      "Seris370": 2,
      "le0tan": 5,
      "LuWenQ": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeletePlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.DeletePlanCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new DeletePlanCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class DeletePlanCommandParser implements Parser\u003cDeletePlanCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePlanCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns a DeletePlanCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public DeletePlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return new DeletePlanCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeleteTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.DeleteTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Parses input arguments and creates a new DeleteTagCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DeleteTagCommandParser implements Parser\u003cDeleteTagCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTagCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * and returns a DeleteTagCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DeleteTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return new DeleteTagCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        DeleteTaskCommand.DeleteTaskDescriptor deleteTaskDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new DeleteTaskCommand.DeleteTaskDescriptor(planIndex, taskIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new DeleteTaskCommand(deleteTaskDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 62
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/DoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DoneTaskCommandParser implements Parser\u003cDoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a DoneTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public DoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                DoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        DoneTaskCommand.DoneTaskDescriptor doneTaskDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new DoneTaskCommand.DoneTaskDescriptor(planIndex, taskIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new DoneTaskCommand(doneTaskDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 62
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditCommand.EditProblemDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_WEBLINK, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_TAG, PREFIX_DIFFICULTY, PREFIX_REMARK, PREFIX_SOURCE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        EditProblemDescriptor editProblemDescriptor \u003d new EditProblemDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WEBLINK).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setWebLink(ParserUtil.parseWeblink(argMultimap.getValue(PREFIX_WEBLINK).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            editProblemDescriptor.setDescription("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editProblemDescriptor::setTags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editProblemDescriptor.setDifficulty("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editProblemDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editProblemDescriptor.setSource(ParserUtil.parseSource(argMultimap.getValue(PREFIX_SOURCE).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!editProblemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new EditCommand(index, editProblemDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 14,
      "LuWenQ": 25,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/EditPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.EditPlanCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.EditPlanCommand.EditPlanDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Parses input arguments and creates a new EditPlanCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class EditPlanCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPlanCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * and returns an EditPlanCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public EditPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                        PREFIX_START_DATE, PREFIX_END_DATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPlanCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        EditPlanDescriptor editPlanDescriptor \u003d new EditPlanDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setPlanName(ParserUtil.parsePlanName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setPlanDescription(ParserUtil.parsePlanDescription("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setStartDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            editPlanDescriptor.setEndDate("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!editPlanDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(EditPlanCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new EditPlanCommand(index, editPlanDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    // TODO: edit problems in a plan"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 65
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/EditTagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditTagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Parses input arguments and creates a new EditTagCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class EditTagCommandParser implements Parser\u003cEditTagCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTagCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * and returns an EditTagCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new EditTagCommand(index, argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.isArrayOfLength;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.AuthorMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.DifficultyIsInRangePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.SourceMatchesKeywordPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.TagIncludesKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private List\u003cString\u003e getArgumentValueAsList(String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String trimmedArg \u003d argValue.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String[] keywords \u003d trimmedArg.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Arrays.asList(keywords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_DESCRIPTION, PREFIX_SOURCE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        PREFIX_DIFFICULTY, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // According to the command format, no preamble should be present."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!argumentMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        FindCommand.FindProblemDescriptor findProblemDescriptor \u003d new FindCommand.FindProblemDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            List\u003cString\u003e nameKeywords \u003d getArgumentValueAsList(argumentMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setNamePredicate(new NameContainsKeywordsPredicate(nameKeywords));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String authorKeyword \u003d argumentMultimap.getValue(PREFIX_AUTHOR).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setAuthorPredicate(new AuthorMatchesKeywordPredicate(authorKeyword));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            List\u003cString\u003e descriptionKeywords \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    getArgumentValueAsList(argumentMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setDescriptionPredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(descriptionKeywords));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_SOURCE).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String sourceKeyword \u003d argumentMultimap.getValue(PREFIX_SOURCE).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setSourcePredicate(new SourceMatchesKeywordPredicate(sourceKeyword));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            String[] difficultyBounds \u003d argumentMultimap.getValue(PREFIX_DIFFICULTY).get().split(\"-\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            if (!isArrayOfLength(difficultyBounds, 2)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                double lowerBound \u003d Double.parseDouble(difficultyBounds[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                double upperBound \u003d Double.parseDouble(difficultyBounds[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                findProblemDescriptor.setDifficultyPredicate(new DifficultyIsInRangePredicate(lowerBound, upperBound));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), nfe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), npe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            List\u003cString\u003e tagKeywords \u003d getArgumentValueAsList(argumentMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            findProblemDescriptor.setTagPredicate(new TagIncludesKeywordsPredicate(tagKeywords));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!findProblemDescriptor.isAnyFieldProvided()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(FindCommand.MESSAGE_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new FindCommand(findProblemDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 75,
      "LuWenQ": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/FindPlanCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.commands.FindPlanCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class FindPlanCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public FindPlanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPlanCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new FindPlanCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 11,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.getClassStringField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public HelpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new HelpCommand(null, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (Class command : Command.COMMAND_LIST) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String commandWord \u003d getClassStringField(command, \"COMMAND_WORD\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                if (commandWord.equals(trimmedArgs)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    return new HelpCommand(command, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_NAME, trimmedArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String name} into a {@code PlanName}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static PlanName parsePlanName(String name) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new PlanName(trimmedName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses a {@code String author} into a {@code Author}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the given {@code author} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Author parseAuthor(String author) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String trimmedAuthor \u003d author.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Author.isValidAuthor(trimmedAuthor)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Author(trimmedAuthor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Parses a {@code String description} into an {@code PlanDescription}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static PlanDescription parsePlanDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new PlanDescription(trimmedDescription);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses a {@code String weblink} into an {@code WebLink}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws ParseException if the given {@code weblink} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static WebLink parseWeblink(String weblink) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(weblink);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        String trimmedWeblink \u003d weblink.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!WebLink.isValidWeblink(trimmedWeblink)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ParseException(WebLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new WebLink(trimmedWeblink);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String difficulty} into an {@code Difficulty}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return new Difficulty(trimmedDifficulty);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String source} into an {@code Source}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if the given {@code source} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static Source parseSource(String source) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        String trimmedSource \u003d source.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!Source.isValidSource(trimmedSource)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Source(source);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String method} into a {@code SortingMethod}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code String method} is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static SortCommand.SortingMethod parseSortingMethod(String method) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byName;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"author\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byAuthor;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"difficulty\":"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byDifficulty;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"source\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.bySource;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"weblink\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingMethod.byWebLink;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(SortCommand.SortingMethod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses a {@code String order} into a {@code SortingOrder}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code String order} is invalid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static SortCommand.SortingOrder parseSortingOrder(String order) throws ParseException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"ascend\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingOrder.ascend;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        case \"descend\":"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return SortCommand.SortingOrder.descend;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(SortCommand.SortingOrder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /** Parses a {@code String date} into an {@code LocalDateTime}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static LocalDateTime parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return LocalDateTime.parse(date, Plan.FORMATTER);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            throw new ParseException(Plan.DATE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 8,
      "Seris370": 58,
      "le0tan": 79,
      "LuWenQ": 34,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_METHOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SORTING_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SortCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_SORTING_METHOD, PREFIX_SORTING_ORDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_SORTING_METHOD)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand.SortingMethod method \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            ParserUtil.parseSortingMethod(argumentMultimap.getValue(PREFIX_SORTING_METHOD).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand.SortingOrder order;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_SORTING_ORDER)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // As specified in UG, ascending order is the default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            order \u003d SortCommand.SortingOrder.ascend;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            order \u003d ParserUtil.parseSortingOrder(argumentMultimap.getValue(PREFIX_SORTING_ORDER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new SortCommand(method, order);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 43
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/SwitchCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " *  Parses input arguments and creates a new SwitchCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public SwitchCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new SwitchCommand(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 28
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/UndoneTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_PLAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.UndoneTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class UndoneTaskCommandParser implements Parser\u003cUndoneTaskCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * and returns a DoneTaskCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public UndoneTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN, PREFIX_TASK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !arePrefixesPresent(argMultimap, PREFIX_TASK)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoneTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            planIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PLAN).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                UndoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index taskIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            taskIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                UndoneTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        UndoneTaskCommand.UndoneTaskDescriptor doneTaskDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new UndoneTaskCommand.UndoneTaskDescriptor(planIndex, taskIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new UndoneTaskCommand(doneTaskDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 62
    }
  },
  {
    "path": "src/main/java/seedu/algobase/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/AlgoBase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.PlanList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.UniqueProblemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Wraps all data at the algobase level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Duplicates are not allowed (by .isSameProblem comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AlgoBase implements ReadOnlyAlgoBase {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final UniqueProblemList problems;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final PlanList plans;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems \u003d new UniqueProblemList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans \u003d new PlanList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase() {}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Creates an AlgoBase using the Problems in the {@code toBeCopied}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase(ReadOnlyAlgoBase toBeCopied) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Resets the existing data of this {@code AlgoBase} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void resetData(ReadOnlyAlgoBase newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        setProblems(newData.getProblemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        setTags(newData.getTagList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the contents of the Problem list with {@code problems}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code problems} must not contain duplicate problems."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setProblems(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problems.setProblems(problems);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Problem with the same identity as {@code Problem} exists in the algobase."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return problems.contains(problem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Problem to the algobase."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must not already exist in the algobase."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addProblem(Problem p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Problem {@code target} in the list with {@code editedProblem}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem identity of {@code editedProblem} must not be the same as another existing Problem in the algobase."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(editedProblem);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.setProblem(target, editedProblem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Removes {@code key} from this {@code AlgoBase}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code key} must exist in the algobase."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void removeProblem(Problem key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getProblemList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the contents of the Tag list with {@code tags}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Tag with the same identity as {@code Tag} exists in the algobase."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Tag to the algobase."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must not already exist in the algobase."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTag(Tag p) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.add(p);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the algobase."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(editedTag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.setTag(target, editedTag);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Removes {@code key} from this {@code AlgoBase}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code key} must exist in the algobase."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void removeTag(Tag key) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        tags.remove(key);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if a Plan with the same identity as {@code Plan} exists in the algobase."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean hasPlan(Plan plan) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(plan);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return plans.contains(plan);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     Adds a Plan to the algobase."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     The Plan must not already exist in the algobase."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void addPlan(Plan p) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans.add(p);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Replaces the given Plan {@code target} in the list with {@code editedPlan}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The Plan identity of {@code editedPlan} must not be the same as another existing Plan in the algobase."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setPlan(Plan target, Plan editedPlan) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(editedPlan);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans.setPlan(target, editedPlan);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void removePlan(Plan key) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plans.remove(key);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public ObservableList\u003cPlan\u003e getPlanList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return plans.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentTaskList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return plans.getUnmodifiableObservableTaskList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return tags.asUnmodifiableObservableList().size() + \" tags\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof AlgoBase // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 problems.equals(((AlgoBase) other).problems))"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 plans.equals(((AlgoBase) other).plans);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return problems.hashCode();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 43,
      "Seris370": 37,
      "LuWenQ": 143
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/GuiState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Tracks the current state of the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class GuiState {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private IntegerProperty displayTabPaneIndex \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        new SimpleIntegerProperty(ModelEnum.PROBLEM.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Creates a {@code GuiState} with default values."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public ObservableIntegerValue getDisplayTabPaneIndex() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return displayTabPaneIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c ModelEnum.values().length;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDisplayTabPaneIndex(Index index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        int indexValue \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (!isValidIndex(indexValue)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Tab value is invalid\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPaneIndex.setValue(indexValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 37
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Predicate\u003cProblem\u003e PREDICATE_SHOW_ALL_PROBLEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Predicate\u003cTag\u003e PREDICATE_SHOW_ALL_TAGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    Predicate\u003cPlan\u003e PREDICATE_SHOW_ALL_PLANS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPref \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the user prefs\u0027 algobase file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the user prefs\u0027 algobase file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setAlgoBaseFilePath(Path algoBaseFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI state \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns the state of the GUI."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    GuiState getGuiState();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces algobase data with the data in {@code algoBase}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setAlgoBase(ReadOnlyAlgoBase algoBase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns the AlgoBase */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ReadOnlyAlgoBase getAlgoBase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Problem with the same identity as {@code Problem} exists in the algobase."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    boolean hasProblem(Problem problem);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Deletes the given Problem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must exist in the algobase."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void deleteProblem(Problem target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds the given Problem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code Problem} must not already exist in the algobase."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void addProblem(Problem problem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Problem {@code target} with {@code editedProblem}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem identity of {@code editedProblem} must not be the same as another existing Problem in the algobase."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setProblem(Problem target, Problem editedProblem);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Problem list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cProblem\u003e getFilteredProblemList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Updates the filter of the filtered Problem list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Updates the Problem list according to the given {@code problemComparator}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param problemComparator"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws NullPointerException if {@code problemComparator} is null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    void updateSortedProblemList(Comparator\u003cProblem\u003e problemComparator);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if a Tag with the same identity as {@code Tag} exists in the algobase."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Deletes the given Tag."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must exist in the algobase."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void deleteTag(Tag target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Deletes the given Tag for all problems."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must exist in the algobase."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void deleteTags(Tag target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds the given Tag."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code Tag} must not already exist in the algobase."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void addTag(Tag tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds the given Tag list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code Tag} must not already exist in the algobase."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void addTags(Set\u003cTag\u003e tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Tag {@code target} with {@code editedTag}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the algobase."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setTag(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the given Tag {@code target} with {@code editedTag} for all problems in AlgoBase."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the algobase."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void setTags(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Tag list */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Updates the filter of the filtered Tag list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if a Plan with the same identity as {@code Plan} exists in the algobase."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    boolean hasPlan(Plan plan);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Deletes the given Plan."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The Plan must exist in the algobase."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void deletePlan(Plan target);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Adds the given Plan."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code Plan} must not already exist in the algobase."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void addPlan(Plan plan);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Replaces the given Plan {@code target} with {@code editedPlan}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * {@code target} must exist in the algobase."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The Plan identity of {@code editedPlan} must not be the same as another existing Plan in the algobase."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void setPlan(Plan target, Plan editedPlan);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Plan list */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cPlan\u003e getFilteredPlanList();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Updates the filter of the filtered Plan list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /** Returns an unmodifiable view of the filtered Plan list */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cTask\u003e getCurrentTaskList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 23,
      "Seris370": 33,
      "le0tan": 2,
      "tiuweehan": 7,
      "LuWenQ": 87,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ModelEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Models displayed in the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public enum ModelEnum {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    PROBLEM (0, \"problem\", \"Problems\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    TAG (1, \"tag\", \"Tags\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    PLAN (2, \"plan\", \"Training Plans\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    TASK (3, \"task\", \"Tasks\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final int displayTabPaneIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String commandArgumentValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final String tabName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    ModelEnum(int displayTabPaneIndex, String commandArgumentValue, String tabName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.displayTabPaneIndex \u003d displayTabPaneIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.commandArgumentValue \u003d commandArgumentValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabName \u003d tabName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public int getDisplayTabPaneIndex() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return displayTabPaneIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String getCommandArgumentValue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return commandArgumentValue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public String getTabName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 2,
      "tiuweehan": 31
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents the in-memory model of the algobase data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final AlgoBase algoBase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private final GuiState guiState;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final FilteredList\u003cProblem\u003e filteredProblems;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final FilteredList\u003cTag\u003e filteredTags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final SortedList\u003cProblem\u003e sortedProblems;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final FilteredList\u003cPlan\u003e filteredPlans;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Initializes a ModelManager with the given algoBase and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ModelManager(ReadOnlyAlgoBase algoBase, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(algoBase, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        logger.fine(\"Initializing with algobase: \" + algoBase + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBase \u003d new AlgoBase(algoBase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        filteredProblems \u003d new FilteredList\u003c\u003e(this.algoBase.getProblemList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        filteredTags \u003d new FilteredList\u003c\u003e(this.algoBase.getTagList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        sortedProblems \u003d new SortedList\u003c\u003e(filteredProblems);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredPlans \u003d new FilteredList\u003c\u003e(this.algoBase.getPlanList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.algoBase.getCurrentTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this(new AlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return userPrefs.getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setAlgoBaseFilePath(Path algoBaseFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(algoBaseFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        userPrefs.setAlgoBaseFilePath(algoBaseFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI State \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return guiState;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setAlgoBase(ReadOnlyAlgoBase algoBase) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBase.resetData(algoBase);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Problem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(problem);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase.hasProblem(problem);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteProblem(Problem target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.removeProblem(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        updateFilteredProblemList(PREDICATE_SHOW_ALL_PROBLEMS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedProblem);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.setProblem(target, editedProblem);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Problem} backed by the internal list of"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code versionedAlgoBase}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return sortedProblems;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredProblems.setPredicate(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Updates the Problem list according to the given {@code problemComparator}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param problemComparator a comparator of problems"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @throws NullPointerException if {@code problemComparator} is null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateSortedProblemList(Comparator\u003cProblem\u003e problemComparator) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(problemComparator);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        sortedProblems.setComparator(problemComparator);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tag \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase.hasTag(tag);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.removeTag(target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteTags(Tag target) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Problem problem : filteredProblems) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Set\u003cTag\u003e targetTags \u003d problem.getTags();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (Tag tag : targetTags) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (tag.getName().equals(target.getName())) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    problem.deleteTag(tag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.addTag(tag);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            addTag(tag);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.setTag(target, editedTag);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Problem problem : filteredProblems) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Set\u003cTag\u003e targetTags \u003d problem.getTags();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (Tag tag : targetTags) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (tag.getName().equals(target.getName())) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    problem.addTag(editedTag);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    problem.deleteTag(tag);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code versionedAlgoBase}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredTags;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        filteredTags.setPredicate(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Plan \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean hasPlan(Plan plan) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(plan);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return algoBase.hasPlan(plan);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void deletePlan(Plan target) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.removePlan(target);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void addPlan(Plan plan) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.addPlan(plan);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        updateFilteredPlanList(PREDICATE_SHOW_ALL_PLANS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlan(Plan target, Plan editedPlan) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(target, editedPlan);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        algoBase.setPlan(target, editedPlan);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Plan} backed by the internal list of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cPlan\u003e getFilteredPlanList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredPlans;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        filteredPlans.setPredicate(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code versionedAlgoBase}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentTaskList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase.equals(other.algoBase)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 filteredProblems.equals(other.filteredProblems);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 89,
      "Seris370": 7,
      "le0tan": 7,
      "tiuweehan": 7,
      "LuWenQ": 103,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ReadOnlyAlgoBase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Unmodifiable view of an algobase"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public interface ReadOnlyAlgoBase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns an unmodifiable view of the problems list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * This list will not contain any duplicate problems."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cProblem\u003e getProblemList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the plans list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cPlan\u003e getPlanList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns an unmodifiable view of the current tasks list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    ObservableList\u003cTask\u003e getCurrentTaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 12,
      "LuWenQ": 19
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Path algoBaseFilePath \u003d Paths.get(\"data\" , \"algobase.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        setAlgoBaseFilePath(newUserPrefs.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBaseFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setAlgoBaseFilePath(Path algoBaseFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(algoBaseFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBaseFilePath \u003d algoBaseFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 algoBaseFilePath.equals(o.algoBaseFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Objects.hash(guiSettings, algoBaseFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + algoBaseFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Tests that a {@code Plan}\u0027s {@code PlanName} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPlan\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean test(Plan plan) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(plan.getPlanName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 7,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/Plan.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Plan in the algobase."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class Plan {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String DATE_TIME_CONSTRAINTS \u003d \"DateTime format should be \u0027yyyy-MM-dd HH:mm:ss\u0027.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final PlanName planName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final PlanDescription planDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Set\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public Plan(PlanName planName, PlanDescription planDescription, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                Set\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireAllNonNull(planName, planDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planName \u003d planName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.planDescription \u003d planDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Creates and returns a {@code Plan} with the details of {@code planToUpdate}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * with an updated {@code taskSet}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static Plan createUpdatedPlan(Plan planToUpdate, Set taskSet) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assert planToUpdate !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        PlanName updatedName \u003d planToUpdate.getPlanName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        PlanDescription updatedDescription \u003d planToUpdate.getPlanDescription();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDateTime startDate \u003d planToUpdate.getStartDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        LocalDateTime endDate \u003d planToUpdate.getEndDate();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return new Plan(updatedName, updatedDescription, startDate, endDate, taskSet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanName getPlanName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanDescription getPlanDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planDescription;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns an immutable task set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Set\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Collections.unmodifiableSet(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if both plans of the same planName have at least one other identity field that is the same."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * This defines a weaker notion of equality between two plans."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean isSamePlan(Plan otherPlan) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (otherPlan \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return otherPlan !\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 otherPlan.getPlanName().equals(getPlanName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if both plans have the same identity and data fields."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * This defines a stronger notion of equality between two plans."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!(other instanceof Plan)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan otherPlan \u003d (Plan) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return otherPlan.getPlanName().equals(getPlanName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 otherPlan.getPlanDescription().equals(getPlanDescription())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 otherPlan.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 otherPlan.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 otherPlan.getTasks().equals(getTasks());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return Objects.hash(planName, planDescription, startDate, endDate, tasks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        builder.append(getPlanName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .append(getPlanDescription())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Tasks: \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        getTasks().forEach(builder::append);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 118,
      "Seris370": 23
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/PlanDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Plan\u0027s description in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String DEFAULT_PLAN_DESCRIPTION_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final PlanDescription DEFAULT_PLAN_DESCRIPTION \u003d new PlanDescription();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs an {@code PlanDescription}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanDescription(String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        value \u003d DEFAULT_PLAN_DESCRIPTION_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if a given string is a valid weblink."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof PlanDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 value.equals(((PlanDescription) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 51,
      "Seris370": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/PlanList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.exceptions.PlanNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * A list of plans."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * @see Plan#isSamePlan(Plan)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class PlanList implements Iterable\u003cPlan\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cPlan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cPlan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalTaskList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableTaskList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalTaskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Adds a Plan to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void add(Plan toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalTaskList.setAll(toAdd.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the Plan {@code target} in the list with {@code editedPlan}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlan(Plan target, Plan updatedPlan) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(target, updatedPlan);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new PlanNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.set(index, updatedPlan);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalTaskList.setAll(updatedPlan.getTasks());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Removes the equivalent Plan from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * The Plan must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void remove(Plan toRemove) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            throw new PlanNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalTaskList.setAll();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlans(PlanList replacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Replaces the contents of this list with {@code plans}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * {@code plans} must not contain duplicate plans."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setPlans(List\u003cPlan\u003e plans) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(plans);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        internalList.setAll(plans);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cPlan\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns the backing task list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getUnmodifiableObservableTaskList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalUnmodifiableTaskList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Iterator\u003cPlan\u003e iterator() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof PlanList // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                        \u0026\u0026 internalList.equals(((PlanList) other).internalList));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Returns true if the list contains an equivalent Plan as the given argument."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean contains(Plan toCheck) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePlan);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 111,
      "Seris370": 9
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/PlanName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Plan\u0027s name in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs a {@code PlanName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                || (other instanceof PlanName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 fullName.equals(((PlanName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 4,
      "Seris370": 5,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/plan/exceptions/PlanNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.plan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Signals that the operation is unable to find the specified Plan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class PlanNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Author.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s author number in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Author implements Comparable\u003cAuthor\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            \"Author numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String DEFAULT_AUTHOR_STRING \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final Author DEFAULT_AUTHOR \u003d new Author();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * The first character of the author\u0027s name must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs a {@code Author}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param author A valid author number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Author(String author) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(author);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        checkArgument(isValidAuthor(author), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        value \u003d author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Author() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_AUTHOR_STRING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given String matches the default author String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultAuthor(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_AUTHOR_STRING);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Author} is the default author."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultAuthor(Author author) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return author \u003d\u003d DEFAULT_AUTHOR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string is a valid author."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 value.equals(((Author) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Author o) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 10,
      "le0tan": 8,
      "tiuweehan": 17,
      "LuWenQ": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/AuthorMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Author} matches the given keyword exactly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class AuthorMatchesKeywordPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final AuthorMatchesKeywordPredicate DEFAULT_AUTHOR_PREDICATE \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new AuthorMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public AuthorMatchesKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private AuthorMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return problem.getAuthor().equals(new Author(keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof AuthorMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 keyword.equals(((AuthorMatchesKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s description in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final Description DEFAULT_DESCRIPTION \u003d new Description();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Description() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_DESCRIPTION_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default description string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDescription(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_DESCRIPTION_STRING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Description} is the default description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDescription(Description test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 4,
      "tiuweehan": 17,
      "LuWenQ": 16,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Description} includes all of the given keywords (ignoring cases)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final DescriptionContainsKeywordsPredicate DEFAULT_DESCRIPTION_PREDICATE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DescriptionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private DescriptionContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(problem.getDescription().value, keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Problem\u0027s difficulty in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDifficulty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Difficulty implements Comparable\u003cDifficulty\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Difficulty should be numeric.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final double DIFFICULTY_LOWER_BOUND \u003d 0.0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final double DIFFICULTY_UPPER_BOUND \u003d 5.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final double DEFAULT_DIFFICULTY_VALUE \u003d DIFFICULTY_LOWER_BOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Difficulty DEFAULT_DIFFICULTY \u003d new Difficulty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+.\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs an {@code Difficulty} from a String representing a number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param difficulty A valid difficulty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d Double.parseDouble(difficulty);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Difficulty() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_DIFFICULTY_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default difficulty value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDifficulty(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Double.parseDouble(test) \u003d\u003d DEFAULT_DIFFICULTY_VALUE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Difficulty} is the default difficulty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultDifficulty(Difficulty test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            double parseResult \u003d Double.parseDouble(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            // Difficulty cannot be 0.0, and 0.0 is reserved for default difficulty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return parseResult \u003e DIFFICULTY_LOWER_BOUND"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    \u0026\u0026 parseResult \u003c\u003d DIFFICULTY_UPPER_BOUND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof Difficulty // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Difficulty) other).value); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Double.hashCode(value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Difficulty o) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return Double.compare(this.value, o.value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 38,
      "Seris370": 3,
      "le0tan": 30,
      "tiuweehan": 20
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/DifficultyIsInRangePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Difficulty} is in the range [{@code lowerBound}, {@code upperBound}]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class DifficultyIsInRangePredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final DifficultyIsInRangePredicate DEFAULT_DIFFICULTY_PREDICATE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new DifficultyIsInRangePredicate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final double DEFAULT_BOUND \u003d -1.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final double lowerBound;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final double upperBound;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public DifficultyIsInRangePredicate(double lowerBound, double upperBound) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.lowerBound \u003d lowerBound;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.upperBound \u003d upperBound;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private DifficultyIsInRangePredicate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.lowerBound \u003d DEFAULT_BOUND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.upperBound \u003d DEFAULT_BOUND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Difficulty difficulty \u003d problem.getDifficulty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return difficulty.value \u003e\u003d lowerBound \u0026\u0026 difficulty.value \u003c\u003d upperBound;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 36
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s name in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A name is any combination of the following characters: A-Z, a-z, \u0027, . or whitespace."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A name must contain at least one non-whitespace character."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([A-z\\\\\u0027\\\\.-ᶜ]+(\\\\s)*)*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Name o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.fullName.compareTo(o.fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 8,
      "tiuweehan": 3,
      "LuWenQ": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final NameContainsKeywordsPredicate DEFAULT_NAME_PREDICATE \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new NameContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private NameContainsKeywordsPredicate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(problem.getName().fullName, keyword));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 11,
      "LuWenQ": 7,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Problem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem in the algobase."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class Problem {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final WebLink webLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final Source source;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Problem(Name name, Author author, WebLink webLink, Description description, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                   Difficulty difficulty, Remark remark, Source source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireAllNonNull(name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.webLink \u003d webLink;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public WebLink getWebLink() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return webLink;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Source getSource() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return source;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if both problems of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * This defines a weaker notion of equality between two problems."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean isSameProblem(Problem otherProblem) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (otherProblem \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return otherProblem !\u003d null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getName().equals(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 (otherProblem.getAuthor().equals(getAuthor()) || otherProblem.getWebLink().equals(getWebLink()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if both problems have the same identity and data fields."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * This defines a stronger notion of equality between two problems."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof Problem)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Problem otherProblem \u003d (Problem) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return otherProblem.getName().equals(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getWebLink().equals(getWebLink())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherProblem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherProblem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherProblem.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherProblem.getSource().equals(getSource());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Objects.hash(name, author, webLink, description, difficulty, remark, source, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" Author: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(getAuthor())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" WebLink: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(getWebLink())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                .append(\" Source: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(getSource())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 7,
      "le0tan": 30,
      "LuWenQ": 46,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a Problem\u0027s solution in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remark can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_REMARK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Remark DEFAULT_REMARK \u003d new Remark();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A remark is a combination of characters or whitespaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * The first character of the solution must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\S[\\\\s\\\\S]*$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * @param remark A valid solution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code Remark} which is empty."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Since public constructor of Remark disallows empty remark,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * this private constructor uses empty string distinguish itself from normal remarks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Remark() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d DEFAULT_REMARK_STRING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given String matches the default remark String."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultRemark(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_REMARK_STRING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Remark} is the default remark."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultRemark(Remark test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_REMARK;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 67,
      "tiuweehan": 16
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/Source.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Represents a Problem\u0027s source in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSource(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Source implements Comparable\u003cSource\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Source should be alphanumeric.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_SOURCE_STRING \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Source DEFAULT_SOURCE \u003d new Source();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs a {@code Source}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @param source A valid source."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Source(String source) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        checkArgument(isValidSource(source), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        value \u003d source;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Constructs an empty {@code Source}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Source() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        value \u003d DEFAULT_SOURCE_STRING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default source string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultSource(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_SOURCE_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Source} is the default source."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultSource(Source test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Returns true if a given string is a valid source."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public static boolean isValidSource(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                || (other instanceof Source // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 value.equals(((Source) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(Source o) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 49,
      "le0tan": 19,
      "tiuweehan": 14
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/SourceMatchesKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that a {@code Problem}\u0027s {@code Source} matches the given keyword exactly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class SourceMatchesKeywordPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final SourceMatchesKeywordPredicate DEFAULT_SOURCE_PREDICATE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new SourceMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public SourceMatchesKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private SourceMatchesKeywordPredicate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keyword \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return problem.getSource().equals(new Source(keyword));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof SourceMatchesKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 keyword.equals(((SourceMatchesKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 37
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/TagIncludesKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Tests that the given set of keywords is a subset of a {@code Problem}\u0027s set of {@code Tag}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class TagIncludesKeywordsPredicate implements Predicate\u003cProblem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final TagIncludesKeywordsPredicate DEFAULT_TAG_PREDICATE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        new TagIncludesKeywordsPredicate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public TagIncludesKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private TagIncludesKeywordsPredicate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.keywords \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean test(Problem problem) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return keywords.stream().allMatch(keyword -\u003e problem.getTags().contains(new Tag(keyword)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                || (other instanceof TagIncludesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagIncludesKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 40
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/UniqueProblemList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.exceptions.DuplicateProblemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.exceptions.ProblemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A list of problems that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A Problem is considered unique by comparing using {@code Problem#isSameProblem(Problem)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * updating of problems uses Problem#isSameProblem(Problem) for equality so as to ensure that the Problem being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * or updated is unique in terms of identity in the UniqueProblemList. However, the removal of a Problem uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Problem#equals(Object) so as to ensure that the Problem with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * @see Problem#isSameProblem(Problem)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class UniqueProblemList implements Iterable\u003cProblem\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cProblem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cProblem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if the list contains an equivalent Problem as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean contains(Problem toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameProblem);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Problem to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void add(Problem toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateProblemException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the Problem {@code target} in the list with {@code editedProblem}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem identity of {@code editedProblem} must not be the same as another existing Problem in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedProblem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ProblemNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!target.isSameProblem(editedProblem) \u0026\u0026 contains(editedProblem)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateProblemException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.set(index, editedProblem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Removes the equivalent Problem from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Problem must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void remove(Problem toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new ProblemNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblems(UniqueProblemList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the contents of this list with {@code problems}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code problems} must not contain duplicate problems."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setProblems(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(problems);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!problemsAreUnique(problems)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateProblemException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(problems);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ObservableList\u003cProblem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Iterator\u003cProblem\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof UniqueProblemList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueProblemList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if {@code problems} contains only unique problems."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private boolean problemsAreUnique(List\u003cProblem\u003e problems) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (int i \u003d 0; i \u003c problems.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (int j \u003d i + 1; j \u003c problems.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (problems.get(i).isSameProblem(problems.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 137
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/WebLink.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Problem\u0027s weblink in the algobase."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeblink(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class WebLink implements Comparable\u003cWebLink\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Weblinks should be parsable by java.net.URL\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            \"\u003c\\\\b(https?|ftp|file)://[-a-zA-Z0-9+\u0026@#/%?\u003d~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%\u003d~_|]\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String DEFAULT_WEBLINK_STRING \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public static final WebLink DEFAULT_WEBLINK \u003d new WebLink();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs an {@code WebLink}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param weblink A valid weblink."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public WebLink(String weblink) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(weblink);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        checkArgument(isValidWeblink(weblink), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        value \u003d weblink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private WebLink() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        value \u003d DEFAULT_WEBLINK_STRING;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string matches the default weblink string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultWeblink(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test.equals(DEFAULT_WEBLINK_STRING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given {@code Weblink} is a default weblink."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static boolean isDefaultWeblink(WebLink test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return test \u003d\u003d DEFAULT_WEBLINK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Returns true if a given string is a valid weblink."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static boolean isValidWeblink(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            URL url \u003d new URL(test);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof WebLink // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 value.equals(((WebLink) other).value)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public int compareTo(WebLink o) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 16,
      "le0tan": 8,
      "tiuweehan": 17,
      "LuWenQ": 13,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/exceptions/DuplicateProblemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation will result in duplicate Problems (Problems are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DuplicateProblemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DuplicateProblemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(\"Operation would result in duplicate problems\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/problem/exceptions/ProblemNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.problem.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation is unable to find the specified Problem."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a Tag in the algobase."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \"Tags names should contain only alphabets, numbers, hyphen or underscore\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_-]*$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param otherTag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @return whether the current tag the same as otherTag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return otherTag !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 otherTag.getName().equals(getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "LuWenQ": 22,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/UniqueTagList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A Tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * updating of tags uses Tag#isSameTag(Tag) for equality so as to ensure that the Tag being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * or updated is unique in terms of identity in the UniqueTagList. However, the removal of a Tag uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Tag#equals(Object) so as to ensure that the Tag with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if the list contains an equivalent Tag as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a Tag to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the Tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag identity of {@code editedTag} must not be the same as another existing Tag in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Removes the equivalent Tag from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * The Tag must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @return toString"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return internalList.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 146
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation will result in duplicate Problems (Problems are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 11
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Signals that the operation is unable to find the specified Tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Represents a Task in the algobase."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Problem problem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Boolean isSolved;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Problem field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Task(Problem problem) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(problem);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.isSolved \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Task(Problem problem, boolean isSolved) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        requireAllNonNull(problem);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.isSolved \u003d isSolved;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.dateTime \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Problem getProblem() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return problem;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Boolean getIsSolved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return isSolved;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns true if both tasks have the same fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return otherTask.getProblem().equals(getProblem())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherTask.getIsSolved().equals(getIsSolved())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                \u0026\u0026 otherTask.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return Objects.hash(problem, isSolved, dateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        builder.append(\"Problem: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(getProblem())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(\" Date: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(getDateTime())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(\" isSolved: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            .append(getIsSolved());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 77,
      "le0tan": 9
    }
  },
  {
    "path": "src/main/java/seedu/algobase/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.PlanDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.PlanName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Contains utility methods for populating {@code AlgoBase} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Problem[] getSampleProblems() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return new Problem[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            new Problem(new Name(\"Sequences\"), new Author(\"Tung Kam Chuen\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://open.kattis.com/problems/sequences\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"Find the sum of the number of inversions of the 2k sequences, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"modulo 1000000007(109+7).\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getTagSet(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Difficulty.DEFAULT_DIFFICULTY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.DEFAULT_REMARK,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"Kattis\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            new Problem(new Name(\"Two Sum\"), Author.DEFAULT_AUTHOR,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://leetcode.com/problems/two-sum/\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"Given an array of integers, \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"return indices of the two numbers such that they add up to a specific target.\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    getTagSet(\"array\", \"hash-table\", \"algorithm\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"1.0\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    new Remark(\"You may assume that each input would have exactly one solution, \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"and you may not use the same element twice.\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"LeetCode\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            new Problem(new Name(\"Second Highest Salary\"), new Author(\"LeetCode\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://leetcode.com/problems/second-highest-salary/\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"Write a SQL query to get the second highest salary from the Employee table.\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getTagSet(\"MySQL\", \"database\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"2.0\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.DEFAULT_REMARK,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"LeetCode\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            new Problem(new Name(\"Sudoku Solver\"), Author.DEFAULT_AUTHOR,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://leetcode.com/problems/sudoku-solver/\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    Description.DEFAULT_DESCRIPTION,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    getTagSet(\"hash-table\", \"backtracking\", \"algorithm\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"5.0\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Remark(\"You may assume that the given Sudoku puzzle will have a single unique solution.\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"LeetCode\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            new Problem(new Name(\"A Dawid and Bags of Candies\"), Author.DEFAULT_AUTHOR,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new WebLink(\"https://codeforces.com/problemset/problem/1230/A\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    Description.DEFAULT_DESCRIPTION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    getTagSet(\"brute-force\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Difficulty(\"4.0\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                    new Remark(\"time limit per test1 second\" + \"memory limit per test256 megabytes\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Source(\"CodeForce\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            new Problem(new Name(\"Factorial\"), new Author(\"Wee Han\"), WebLink.DEFAULT_WEBLINK,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    new Description(\"define a function factorial that takes in a number n \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                            + \"and returns the factorial of the number.\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                    getTagSet(\"recursion\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Difficulty.DEFAULT_DIFFICULTY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.DEFAULT_REMARK,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Source.DEFAULT_SOURCE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static ReadOnlyAlgoBase getSampleAlgoBase() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        AlgoBase sampleAb \u003d new AlgoBase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Set\u003cTask\u003e tasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (Problem sampleProblem : getSampleProblems()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            sampleAb.addProblem(sampleProblem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tasks.add(new Task(sampleProblem));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Plan samplePlan \u003d new Plan(new PlanName(\"Graph Algo\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new PlanDescription(\"CS2040 Graph Algorithms\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            LocalDateTime.now(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            LocalDateTime.now(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        sampleAb.addPlan(samplePlan);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 15,
      "Seris370": 33,
      "le0tan": 14,
      "tiuweehan": 6,
      "LuWenQ": 11,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/AlgoBaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a storage for {@link seedu.algobase.model.AlgoBase}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public interface AlgoBaseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns AlgoBase data as a {@link ReadOnlyAlgoBase}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see #getAlgoBaseFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Saves the given {@link ReadOnlyAlgoBase} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param algoBase cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see #saveAlgoBase(ReadOnlyAlgoBase)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void saveAlgoBase(ReadOnlyAlgoBase algoBase, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedProblem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Jackson-friendly version of {@link Problem}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "class JsonAdaptedProblem {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Problem\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String author;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String weblink;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private final String source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs a {@code JsonAdaptedProblem} with the given Problem details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonAdaptedProblem(@JsonProperty(\"name\") String name, @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                              @JsonProperty(\"weblink\") String weblink, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                              @JsonProperty(\"difficulty\") String difficulty,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                              @JsonProperty(\"remark\") String remark, @JsonProperty(\"source\") String source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.weblink \u003d weblink;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.source \u003d source;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts a given {@code Problem} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public JsonAdaptedProblem(Problem problem) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        name \u003d problem.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        author \u003d problem.getAuthor().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        weblink \u003d problem.getWebLink().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        description \u003d problem.getDescription().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        tagged.addAll(problem.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficulty \u003d Double.toString(problem.getDifficulty().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        remark \u003d problem.getRemark().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        source \u003d problem.getSource().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts this Jackson-friendly adapted Problem object into the model\u0027s {@code Problem} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Problem."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Problem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        final List\u003cTag\u003e problemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            problemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Name modelName \u003d retrieveName(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Author modelAuthor \u003d retrieveAuthor(author);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final WebLink modelWebLink \u003d retrieveWeblink(weblink);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Description modelDescription \u003d retrieveDescription(description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Difficulty modelDifficulty \u003d retrieveDifficulty(difficulty);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Remark modelRemark \u003d retrieveRemark(remark);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Source modelSource \u003d retrieveSource(source);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(problemTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Problem(modelName, modelAuthor, modelWebLink, modelDescription, modelTags, modelDifficulty,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                modelRemark, modelSource);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a name in string format to a Name Object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param name name in string format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Name Object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Name retrieveName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts an author in string format to an Author Object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param author author in string format."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Author Object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Author retrieveAuthor(String author) throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Author.isDefaultAuthor(author)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Author.DEFAULT_AUTHOR;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Author.isValidAuthor(author)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Author(author);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a weblink in string format to a Weblink Object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param weblink weblink in string format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Weblink Object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public WebLink retrieveWeblink(String weblink) throws IllegalValueException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (weblink \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, WebLink.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (WebLink.isDefaultWeblink(weblink)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return WebLink.DEFAULT_WEBLINK;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!WebLink.isValidWeblink(weblink)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(WebLink.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new WebLink(weblink);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a description in string format to a Description Object."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param description description in string format."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Description Object."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Description retrieveDescription(String description) throws IllegalValueException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Description.isDefaultDescription(description)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Description.DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a difficulty in string format to a Difficulty Object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param difficulty difficulty in string format."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Difficulty Object."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Difficulty retrieveDifficulty(String difficulty) throws IllegalValueException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Difficulty.class.getSimpleName())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Difficulty.isDefaultDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Difficulty.DEFAULT_DIFFICULTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Difficulty(difficulty);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a remark in string format to a Remark Object."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param remark remark in string format."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Remark Object."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Remark retrieveRemark(String remark) throws IllegalValueException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Remark.class.getSimpleName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Remark.isDefaultRemark(remark)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Remark.DEFAULT_REMARK;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Remark(remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Converts a source in string format to a Source Object."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param source source in string format."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @return the corresponding Source Object."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @throws IllegalValueException if string format is invalid."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Source retrieveSource(String source) throws IllegalValueException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (source \u003d\u003d null) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Source.class.getSimpleName())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        if (Source.isDefaultSource(source)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return Source.DEFAULT_SOURCE;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        if (!Source.isValidSource(source)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new IllegalValueException(Source.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return new Source(source);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 58,
      "tiuweehan": 115,
      "LuWenQ": 39,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonAlgoBaseStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A class to access AlgoBase data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class JsonAlgoBaseStorage implements AlgoBaseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAlgoBaseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonAlgoBaseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return readAlgoBase(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Similar to {@link #readAlgoBase()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Optional\u003cJsonSerializableAlgoBase\u003e jsonAlgoBase \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                filePath, JsonSerializableAlgoBase.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!jsonAlgoBase.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            return Optional.of(jsonAlgoBase.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        saveAlgoBase(algoBase, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Similar to {@link #saveAlgoBase(ReadOnlyAlgoBase)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        requireNonNull(algoBase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAlgoBase(algoBase), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 26,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonSerializableAlgoBase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * An Immutable AlgoBase that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "@JsonRootName(value \u003d \"algobase\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "class JsonSerializableAlgoBase {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROBLEM \u003d \"Problems list contains duplicate Problem(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tags list contains duplicate Tag(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final List\u003cJsonAdaptedProblem\u003e problems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Constructs a {@code JsonSerializableAlgoBase} with the given problems."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonSerializableAlgoBase(@JsonProperty(\"problems\") List\u003cJsonAdaptedProblem\u003e problems,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                                    @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.problems.addAll(problems);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts a given {@code ReadOnlyAlgoBase} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAlgoBase}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public JsonSerializableAlgoBase(ReadOnlyAlgoBase source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problems.addAll(source.getProblemList().stream().map(JsonAdaptedProblem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags.addAll(source.getTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Converts this algobase into the model\u0027s {@code AlgoBase} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        AlgoBase algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (JsonAdaptedProblem jsonAdaptedProblem : problems) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Problem problem \u003d jsonAdaptedProblem.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (algoBase.hasProblem(problem)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROBLEM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            Tag tag \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (algoBase.hasTag(tag)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            algoBase.addTag(tag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 73
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public interface Storage extends AlgoBaseStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Path getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Manages storage of AlgoBase data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private AlgoBaseStorage algoBaseStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public StorageManager(AlgoBaseStorage algoBaseStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBaseStorage \u003d algoBaseStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AlgoBase methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBaseStorage.getAlgoBaseFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return readAlgoBase(algoBaseStorage.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Optional\u003cReadOnlyAlgoBase\u003e readAlgoBase(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBaseStorage.readAlgoBase(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        saveAlgoBase(algoBase, algoBaseStorage.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void saveAlgoBase(ReadOnlyAlgoBase algoBase, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBaseStorage.saveAlgoBase(algoBase, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/algobase/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Represents a storage for {@link seedu.algobase.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Saves the given {@link seedu.algobase.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "         * @see seedu.algobase.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 5,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/DisplayTab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * An UI component that displays tab content."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DisplayTab extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"DisplayTab.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Tab tabContentPlaceholder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DisplayTab(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder \u003d new Tab(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DisplayTab(String name, UiPart\u003cRegion\u003e uiPart) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabContentPlaceholder \u003d new Tab(name, uiPart.getRoot());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        return tabContentPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 30
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/DisplayTabPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableIntegerValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.GuiState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " * Pane containing the different tabs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class DisplayTabPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final String FXML \u003d \"DisplayTabPane.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private TabPane tabsPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private StackPane problemListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public DisplayTabPane(GuiState guiState, DisplayTab... displayTabs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addTabsToTabPane(displayTabs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerForIndex(guiState.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        addListenerToTabPane(guiState::setDisplayTabPaneIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a list of display tabs to the tab pane."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param displayTabs List of tabs to be displayed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addTabsToTabPane(DisplayTab... displayTabs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        for (DisplayTab displayTab: displayTabs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            this.tabsPlaceholder.getTabs().add(displayTab.getTab());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds a listener to the tab pane that watches for an index change."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param displayTabPaneIndex The observable index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerForIndex(ObservableIntegerValue displayTabPaneIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPaneIndex.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            selectTab((newValue.intValue()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Adds an index change listener to the tab pane."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param indexChangeHandler A callback function for when the index of the tabPane changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private void addListenerToTabPane(Consumer\u003cIndex\u003e indexChangeHandler) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        this.tabsPlaceholder.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "                indexChangeHandler.accept(Index.fromZeroBased(newValue.intValue()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * Selects the tab to be displayed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * @param index the index of the tab in the tab pane to be selected."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void selectTab(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        tabsPlaceholder.getSelectionModel().select(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 79
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/algobase/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelEnum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private DisplayTabPane displayTabPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private ProblemListPanel problemListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private PlanListPanel planListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private StackPane displayTabPanePlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        problemListPanel \u003d new ProblemListPanel(logic.getProcessedProblemList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planListPanel \u003d new PlanListPanel(logic.getProcessedPlanList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getProcessedTaskList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        DisplayTab problemListPanelTab \u003d new DisplayTab(ModelEnum.PROBLEM.getTabName(), problemListPanel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        DisplayTab tagListPanelTab \u003d new DisplayTab(ModelEnum.TAG.getTabName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        DisplayTab planListPanelTab \u003d new DisplayTab(ModelEnum.PLAN.getTabName(), planListPanel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        DisplayTab taskListPanelTab \u003d new DisplayTab(ModelEnum.TASK.getTabName(), taskListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPane \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new DisplayTabPane("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                logic.getGuiState(), problemListPanelTab, tagListPanelTab, planListPanelTab, taskListPanelTab);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        displayTabPanePlaceholder.getChildren().add(displayTabPane.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAlgoBaseFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemListPanel getProblemListPanel() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return problemListPanel;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanListPanel getPlanListPanel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return planListPanel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * @see seedu.algobase.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 7,
      "Seris370": 7,
      "tiuweehan": 10,
      "le0tan": 1,
      "LuWenQ": 12,
      "-": 178
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/PlanCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * An UI component that displays information of a {@code Plan}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static final String FXML \u003d \"PlanListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public final Plan plan;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label planName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label planDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private FlowPane tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanCard(Plan plan, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        this.plan \u003d plan;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planName.setText(plan.getPlanName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planDescription.setText(plan.getPlanDescription().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        startDate.setText(plan.getStartDate().format(Plan.FORMATTER));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        endDate.setText(plan.getEndDate().format(Plan.FORMATTER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        formatTasks(plan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Constructs labels from tasks in {@code plan}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private void formatTasks(Plan plan) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        plan.getTasks().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .sorted(Comparator.comparing(Task::getDateTime))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                .forEach(task -\u003e tasks.getChildren().add(new Label(task.getProblem().toString() + \u0027\\n\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                + task.getIsSolved().toString() + \u0027\\n\u0027 + task.getDateTime().toString())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // checks if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // checks if object of same class"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // handles null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        if (!(other instanceof PlanCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        // check fields equality"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        PlanCard card \u003d (PlanCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                \u0026\u0026 plan.equals(card.plan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 77
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/PlanListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Seris370"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Seris370"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Seris370"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Seris370"
        },
        "content": " * Panel containing the list of plans."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Seris370"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Seris370"
        },
        "content": "public class PlanListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private static final String FXML \u003d \"PlanListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PlanListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    private ListView\u003cPlan\u003e planListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public PlanListPanel(ObservableList\u003cPlan\u003e planList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planListView.setItems(planList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        planListView.setCellFactory(listView -\u003e new PlanListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Plan} using a {@code PlanCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    class PlanListViewCell extends ListCell\u003cPlan\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        protected void updateItem(Plan plan, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            super.updateItem(plan, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            if (empty || plan \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Seris370"
        },
        "content": "                setGraphic(new PlanCard(plan, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Seris370"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Seris370"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Seris370": 47
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/ProblemCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * An UI component that displays information of a {@code Problem}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String FXML \u003d \"ProblemListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public final Problem problem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Label weblink;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemCard(Problem problem, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        name.setText(problem.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        author.setText(problem.getAuthor().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        description.setText(problem.getDescription().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        weblink.setText(problem.getWebLink().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        difficulty.setText(problem.getDifficulty().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        remark.setText(problem.getRemark().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        source.setText(problem.getSource().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problem.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        if (!(other instanceof ProblemCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        ProblemCard card \u003d (ProblemCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                \u0026\u0026 problem.equals(card.problem);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 6,
      "LuWenQ": 19,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/ProblemListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Panel containing the list of problems."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private static final String FXML \u003d \"ProblemListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProblemListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private ListView\u003cProblem\u003e problemListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemListPanel(ObservableList\u003cProblem\u003e problemList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problemListView.setItems(problemList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problemListView.setCellFactory(listView -\u003e new ProblemListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Problem} using a {@code ProblemCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    class ProblemListViewCell extends ListCell\u003cProblem\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        protected void updateItem(Problem problem, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            super.updateItem(problem, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            if (empty || problem \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                setGraphic(new ProblemCard(problem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/TaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label weblink;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Label source;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        name.setText(task.getProblem().getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        author.setText(task.getProblem().getAuthor().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        description.setText(task.getProblem().getDescription().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        weblink.setText(task.getProblem().getWebLink().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        difficulty.setText(task.getProblem().getDifficulty().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        remark.setText(task.getProblem().getRemark().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        source.setText(task.getProblem().getSource().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        task.getProblem().getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 83
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 45
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 5,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/algobase/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-opacity: 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-tab-min-width: 90px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-insets: 0 1 0 1,0,0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-text-fill: #828282;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    -fx-text-fill: #96b946;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "#filterField, #problemListPanel, #problemWebpage {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 26,
      "LuWenQ": 1,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/DisplayTab.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cTab xmlns:fx\u003d\"http://javafx.com/fxml/1\"  fx:id\u003d\"tabContentPlaceholder\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 5
    }
  },
  {
    "path": "src/main/resources/view/DisplayTabPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "\u003cTabPane minHeight\u003d\"360.0\" prefWidth\u003d\"340.0\" side\u003d\"TOP\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"tabsPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "         title\u003d\"AlgoBase App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"displayTabPanePlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 3,
      "LuWenQ": 3,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/view/PlanListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        \u003cLabel fx:id\u003d\"planName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tasks\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cLabel fx:id\u003d\"planDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$planDescription\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Seris370"
        },
        "content": "      \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Seris370": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/PlanListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    \u003cListView fx:id\u003d\"planListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Seris370": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ProblemListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "      \u003cLabel fx:id\u003d\"weblink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$webLink\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "      \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 1,
      "tiuweehan": 3,
      "LuWenQ": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/ProblemListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "  \u003cListView fx:id\u003d\"problemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"weblink\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$webLink\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "      \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 38
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 7
    }
  },
  {
    "path": "src/test/java/seedu/algobase/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        final Index fifthProblemIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertTrue(fifthProblemIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertTrue(fifthProblemIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertTrue(fifthProblemIndex.equals(fifthProblemIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertFalse(fifthProblemIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertFalse(fifthProblemIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertFalse(fifthProblemIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/algobase/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.AUTHOR_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.DESCRIPTION_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.NAME_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.REMARK_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.SOURCE_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.WEBLINK_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.JsonAlgoBaseStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.testutil.ProblemBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAlgoBaseStorage algobaseBookStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new JsonAlgoBaseStorage(temporaryFolder.resolve(\"algobase.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(algobaseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PROBLEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // Setup LogicManager with JsonAlgobaseBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonAlgoBaseStorage jsonAlgoBaseStorage \u003d new JsonalgobaseBookIoExceptionThrowingStub("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionAlgoBase.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jsonAlgoBaseStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_QUICK_SORT + DESCRIPTION_DESC_QUICK_SORT"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                + AUTHOR_DESC_QUICK_SORT + WEBLINK_DESC_QUICK_SORT + REMARK_DESC_QUICK_SORT + SOURCE_DESC_QUICK_SORT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem expectedProblem \u003d new ProblemBuilder(QUICK_SORT).withTags().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedModel.addProblem(expectedProblem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // TODO: implementation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e model.getFilteredProblemList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static class JsonalgobaseBookIoExceptionThrowingStub extends JsonAlgoBaseStorage {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        private JsonalgobaseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void saveAlgoBase(ReadOnlyAlgoBase algobaseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 44,
      "LuWenQ": 2,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.testutil.ProblemBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void constructor_nullProblem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_problemAcceptedByModel_addsSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        ModelStubAcceptingProblemAdded modelStub \u003d new ModelStubAcceptingProblemAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem validProblem \u003d new ProblemBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validProblem).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validProblem), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(Arrays.asList(validProblem), modelStub.problemsAdded);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * A Model stub that always accept the problem being added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private class ModelStubAcceptingProblemAdded extends DefaultModelStub {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final ArrayList\u003cProblem\u003e problemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final ArrayList\u003cTag\u003e tagsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(problem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return problemsAdded.stream().anyMatch(problem::isSameProblem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(problem);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            problemsAdded.add(problem);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagsAdded.add(tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            for (Tag tag : tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                addTag(tag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            return new AlgoBase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 3,
      "le0tan": 70
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/AddTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "class AddTaskCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void constructor_nullDescriptor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void execute_invalidProblemIndex_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index planIndex \u003d Index.fromOneBased(model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        Index outOfBoundProblemIndex \u003d Index.fromOneBased(model.getFilteredProblemList().size() + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand.AddTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "            new AddTaskCommand.AddTaskDescriptor(planIndex, outOfBoundProblemIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        AddTaskCommand addTaskCommand \u003d new AddTaskCommand(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addTaskCommand.execute(model));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 31
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_SOURCE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_AUTHOR_QUICK_SORT \u003d \"Steven Halim\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DESCRIPTION_QUICK_SORT \u003d \"Sort an array quickly, in O(1) time \u003d)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DIFFICULTY_QUICK_SORT \u003d \"1.5\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_NAME_QUICK_SORT \u003d \"Quick sort\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_REMARK_QUICK_SORT \u003d \"Steven says this is easy.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_SOURCE_QUICK_SORT \u003d \"Kattis\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_WEBLINK_QUICK_SORT \u003d \"https://open.kattis.com/0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String AUTHOR_DESC_QUICK_SORT \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_QUICK_SORT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DESCRIPTION_DESC_QUICK_SORT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_QUICK_SORT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DIFFICULTY_DESC_QUICK_SORT \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_QUICK_SORT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String NAME_DESC_QUICK_SORT \u003d \" \" + PREFIX_NAME + VALID_NAME_QUICK_SORT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REMARK_DESC_QUICK_SORT \u003d \" \" + PREFIX_REMARK + VALID_REMARK_QUICK_SORT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String SOURCE_DESC_QUICK_SORT \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_QUICK_SORT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String WEBLINK_DESC_QUICK_SORT \u003d \" \" + PREFIX_WEBLINK + VALID_WEBLINK_QUICK_SORT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_AUTHOR_TWO_SUM \u003d \"Alice Halim\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DESCRIPTION_TWO_SUM \u003d \"B\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DIFFICULTY_TWO_SUM \u003d \"2.0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_NAME_TWO_SUM \u003d \"Two sum\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_REMARK_TWO_SUM \u003d \"B\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_SOURCE_TWO_SUM \u003d \"B\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_WEBLINK_TWO_SUM \u003d \"https://open.kattis.com/1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String AUTHOR_DESC_TWO_SUM \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_TWO_SUM;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DESCRIPTION_DESC_TWO_SUM \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TWO_SUM;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DIFFICULTY_DESC_TWO_SUM \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_TWO_SUM;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String NAME_DESC_TWO_SUM \u003d \" \" + PREFIX_NAME + VALID_NAME_TWO_SUM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REMARK_DESC_TWO_SUM \u003d \" \" + PREFIX_REMARK + VALID_REMARK_TWO_SUM;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String SOURCE_DESC_TWO_SUM \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_TWO_SUM;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String WEBLINK_DESC_TWO_SUM \u003d \" \" + PREFIX_WEBLINK + VALID_WEBLINK_TWO_SUM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_AUTHOR_FACTORIAL \u003d \"Clice Halim\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DESCRIPTION_FACTORIAL \u003d \"C\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_DIFFICULTY_FACTORIAL \u003d \"2.5\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_NAME_FACTORIAL \u003d \"Factorial\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_REMARK_FACTORIAL \u003d \"C\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_SOURCE_FACTORIAL \u003d \"C\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String VALID_WEBLINK_FACTORIAL \u003d \"https://open.kattis.com/2\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String AUTHOR_DESC_FACTORIAL \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_FACTORIAL;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DESCRIPTION_DESC_FACTORIAL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_FACTORIAL;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DIFFICULTY_DESC_FACTORIAL \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_FACTORIAL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String NAME_DESC_FACTORIAL \u003d \" \" + PREFIX_NAME + VALID_NAME_FACTORIAL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String REMARK_DESC_FACTORIAL \u003d \" \" + PREFIX_REMARK + VALID_REMARK_FACTORIAL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String SOURCE_DESC_FACTORIAL \u003d \" \" + PREFIX_SOURCE + VALID_SOURCE_FACTORIAL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String WEBLINK_DESC_FACTORIAL \u003d \" \" + PREFIX_WEBLINK + VALID_WEBLINK_FACTORIAL;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // TODO: Come up with valid invalid commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in author"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    // empty string not allowed for description"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK; // empty string not allowed for remarks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_SOURCE_DESC \u003d \" \" + PREFIX_SOURCE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String INVALID_WEBLINK_DESC \u003d \" \" + PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AlgoBase expectedAddressBook \u003d new AlgoBase(actualModel.getAlgoBase());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cProblem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredProblemList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAlgoBase());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredProblemList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Problem problem \u003d model.getFilteredProblemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        final String[] splitName \u003d problem.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        model.updateFilteredProblemList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(1, model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 146
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/DefaultModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.GuiState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.ReadOnlyAlgoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.plan.Plan;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "import seedu.algobase.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiayushe"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "public class DefaultModelStub implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public Path getAlgoBaseFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setAlgoBaseFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void addProblem(Problem problem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setAlgoBase(ReadOnlyAlgoBase newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ReadOnlyAlgoBase getAlgoBase() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public boolean hasProblem(Problem problem) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void deleteProblem(Problem problem) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void setProblem(Problem target, Problem editedProblem) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public GuiState getGuiState() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cPlan\u003e getFilteredPlanList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void updateFilteredPlanList(Predicate\u003cPlan\u003e predicate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cProblem\u003e getFilteredProblemList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public boolean hasPlan(Plan plan) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void deletePlan(Plan target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void addPlan(Plan plan) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    public void setPlan(Plan target, Plan editedPlan) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Seris370"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Seris370"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Seris370"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateFilteredProblemList(Predicate\u003cProblem\u003e predicate) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void deleteTags(Tag target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void addTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void setTags(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public void updateSortedProblemList(Comparator\u003cProblem\u003e problemComparator) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiayushe"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    public ObservableList\u003cTask\u003e getCurrentTaskList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiayushe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiayushe": 106,
      "Seris370": 25,
      "le0tan": 47,
      "tiuweehan": 6
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/DeleteTagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.commands.DeleteTagCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class DeleteTagCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testcommandword() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(\"deletetag\", COMMAND_WORD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 13
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 6
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String EXPECTED_COMMAND_LIST \u003d \"Available commands are: [add, addplan, addtag, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"clear, delete, deleteplan, deletetag, deletetask, donetask, edit, editplan, edittag, exit, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"find, findplan, help, list, listplan, listtag, sort, switch, undonetask]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        + \"More information can be found in the popup window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void constructor_nullCommandClassWithoutListingAllCommands_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new HelpCommand(null, false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void constructor_nullCommandClassWithListingAllCommands_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand command \u003d new HelpCommand(null, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new CommandResult(EXPECTED_COMMAND_LIST, true, false), expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void execute_correctCommandWord_showsMessageUsage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand command \u003d new HelpCommand(AddCommand.class, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertCommandSuccess(command, model, AddCommand.MESSAGE_USAGE, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 39
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.SortCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.getTypicalAlgoBase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class SortCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAlgoBase(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * - the {@code filteredProblemList} matches the original list sorted with {@code comparator}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * in content and order."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private void assertSuccessfullySorted(SortCommand command, Comparator\u003cProblem\u003e comparator) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        CommandResult actualResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(new CommandResult(expectedMessage), actualResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cProblem\u003e expectedList \u003d new ArrayList\u003c\u003e(expectedModel.getFilteredProblemList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        expectedList.sort(comparator);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        ObservableList\u003cProblem\u003e actualList \u003d model.getFilteredProblemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(expectedList.size(), actualList.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedList.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            assertEquals(expectedList.get(i), actualList.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SortCommand(null, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byNameAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byName, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_NAME_COMPARATOR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byAuthorAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byAuthor, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_AUTHOR_COMPARATOR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byWebLinkAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byWebLink, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_WEB_LINK_COMPARATOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byDifficultyAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byDifficulty, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_DIFFICULTY_COMPARATOR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_bySourceAscend_success() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.bySource, SortCommand.SortingOrder.ascend);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_SOURCE_COMPARATOR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byNameDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byName, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_NAME_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byAuthorDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byAuthor, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_AUTHOR_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byWebLinkDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byWebLink, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_WEB_LINK_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_byDifficultyDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.byDifficulty, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_DIFFICULTY_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void execute_bySourceDescend_success() throws CommandException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SortCommand command \u003d new SortCommand(SortCommand.SortingMethod.bySource, SortCommand.SortingOrder.descend);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertSuccessfullySorted(command, SortCommand.PROBLEM_SOURCE_COMPARATOR.reversed());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 108
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/commands/SwitchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.GuiState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.model.ModelEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "class SwitchCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void constructor_nullProblem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SwitchCommand(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_displayTabIndexAcceptedByModel_switchSuccessful() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStubAcceptingDisplayTabIndex modelStub \u003d new ModelStubAcceptingDisplayTabIndex();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromOneBased(ModelEnum.PLAN.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        CommandResult commandResult \u003d new SwitchCommand(index).execute(modelStub);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            String.format(SwitchCommand.MESSAGE_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            commandResult.getFeedbackToUser()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void execute_displayTabIndexRejectedByModel_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        ModelStubAcceptingDisplayTabIndex modelStub \u003d new ModelStubAcceptingDisplayTabIndex();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index index \u003d Index.fromZeroBased(ModelEnum.values().length);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new SwitchCommand(index).execute(modelStub));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     * A Model stub that always accepts the problem being added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private class ModelStubAcceptingDisplayTabIndex extends DefaultModelStub {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        public GuiState getGuiState() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            return new GuiState();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 50
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class FindCommandParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 6
    }
  },
  {
    "path": "src/test/java/seedu/algobase/logic/parser/HelpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.commons.core.Messages.MESSAGE_INVALID_COMMAND_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class HelpCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String INVALID_COMMAND_WORD \u003d \"1nval1dC0mmand\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String VALID_COMMAND_WORD \u003d AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final Class VALID_COMMAND_CLASS \u003d AddCommand.class;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private HelpCommandParser helpCommandParser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void parse_emptyInput_returnsListAllHelpCommand() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        HelpCommand helpCommand \u003d helpCommandParser.parse(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(helpCommand.isListAllCommands());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void parse_wrongCommandWord_throwsInvalidCommandWordException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_NAME, INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertParseFailure(helpCommandParser, INVALID_COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    void parse_correctCommandWord_returnsHelpCommandForTheCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertParseSuccess(helpCommandParser, VALID_COMMAND_WORD,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new HelpCommand(VALID_COMMAND_CLASS, false));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 37
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/GuiStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "package seedu.algobase.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "public class GuiStateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Index OLD_VALUE \u003d Index.fromZeroBased(ModelEnum.PROBLEM.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Index NEW_VALUE \u003d Index.fromZeroBased(ModelEnum.TAG.getDisplayTabPaneIndex());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    private static final Index ILLEGAL_VALUE \u003d Index.fromZeroBased(ModelEnum.values().length);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDisplayTabPaneIndex_indexWithinRange_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        GuiState guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index[] testValues \u003d new Index[] { OLD_VALUE };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        guiState.getDisplayTabPaneIndex().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            testValues[0] \u003d Index.fromZeroBased((newValue.intValue()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        guiState.setDisplayTabPaneIndex(NEW_VALUE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertEquals(NEW_VALUE, testValues[0], \"Listener does not update value correctly\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    public void setDisplayTabPaneIndex_indexOutsideRange_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        GuiState guiState \u003d new GuiState();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        Index[] testValues \u003d new Index[] { OLD_VALUE };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        guiState.getDisplayTabPaneIndex().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "            testValues[0] \u003d Index.fromZeroBased((newValue.intValue()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e guiState.setDisplayTabPaneIndex(ILLEGAL_VALUE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tiuweehan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tiuweehan": 40
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/AuthorMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class AuthorMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_authorMatches_returnTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate predicate \u003d new AuthorMatchesKeywordPredicate(QUICK_SORT.getAuthor().value);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_authorDoesNotMatch_returnFalse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AuthorMatchesKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new AuthorMatchesKeywordPredicate(QUICK_SORT.getAuthor().value.toUpperCase());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 22
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String KEYWORD_NOT_IN_QUICK_SORT_DESCRIPTION \u003d \"1mP0ss1ble\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_problemDescriptionContainsKeywords_returnTrue() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                Arrays.asList(QUICK_SORT.getDescription().value.split(\" \")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(true, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintKeywordNotSeparatedBySpaces_returnFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        Arrays.asList(QUICK_SORT.getDescription().value.replace(\" \", \"\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(false, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintContainsExtraKeywords_returnFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        Arrays.asList(QUICK_SORT.getDescription().value.split(\" \")[0],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                            KEYWORD_NOT_IN_QUICK_SORT_DESCRIPTION));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(false, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 39
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/DifficultyIsInRangePredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class DifficultyIsInRangePredicateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_difficultyInRange_returnTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate predicate \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new DifficultyIsInRangePredicate(QUICK_SORT.getDifficulty().value, QUICK_SORT.getDifficulty().value);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_difficultyOutOfRange_returnFalse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        DifficultyIsInRangePredicate predicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new DifficultyIsInRangePredicate(QUICK_SORT.getDifficulty().value * 2,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    QUICK_SORT.getDifficulty().value * 3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 24
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String KEYWORD_NOT_IN_QUICK_SORT_NAME \u003d \"1mP0ss1ble\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_problemNameContainsKeywords_returnTrue() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                        Arrays.asList(QUICK_SORT.getName().fullName.split(\" \")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(true, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintKeywordNotSeparatedBySpaces_returnFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Arrays.asList(QUICK_SORT.getName().fullName.replace(\" \", \"\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(false, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_constraintContainsExtraKeywords_returnTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                    Arrays.asList(QUICK_SORT.getName().fullName.split(\" \")[0],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                            KEYWORD_NOT_IN_QUICK_SORT_NAME));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertEquals(true, predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 39
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/SourceMatchesKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class SourceMatchesKeywordPredicateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_sourcerMatches_returnTrue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate predicate \u003d new SourceMatchesKeywordPredicate(QUICK_SORT.getSource().value);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_sourceDoesNotMatch_returnFalse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        SourceMatchesKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new SourceMatchesKeywordPredicate(QUICK_SORT.getSource().value.toUpperCase());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 22
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/problem/TagIncludesKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.model.problem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.testutil.TypicalProblems.QUICK_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "class TagIncludesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private static final String KEYWORD_NOT_IN_QUICK_SORT_TAGS \u003d \"exttttremely_impossible\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_tagIncludesKeywords_returnTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        Set\u003cTag\u003e tags \u003d QUICK_SORT.getTags();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        List\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            tagList.add(tag.tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            new TagIncludesKeywordsPredicate(tagList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertTrue(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public void test_tagDoesNotIncludeKeywords_returnFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        TagIncludesKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": "                new TagIncludesKeywordsPredicate(Arrays.asList(KEYWORD_NOT_IN_QUICK_SORT_TAGS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        assertFalse(predicate.test(QUICK_SORT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 37
    }
  },
  {
    "path": "src/test/java/seedu/algobase/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testGetName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tag \u003d new Tag(\"Difficult\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(\"Difficult\", tag.getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Tag tag \u003d new Tag(\"Easy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(false, tag.equals(new Tag(\"easy\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(true, tag.equals(new Tag(\"Easy\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public void testIsValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(false, Tag.isValidTagName(\"very difficult\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        assertEquals(true, Tag.isValidTagName(\"Sort\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 27
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/AlgoBaseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class to help with building Algobase objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " *     {@code AlgoBase ab \u003d new AlgoBaseBuilder().withProblem(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class AlgoBaseBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private AlgoBase algoBase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBaseBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBaseBuilder(AlgoBase algoBase) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.algoBase \u003d algoBase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Adds a new {@code Problem} to the {@code AlgoBase} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBaseBuilder withProblem(Problem problem) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public AlgoBase build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 34
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/EditProblemDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditCommand.EditProblemDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class to help with building EditProblemDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class EditProblemDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private EditProblemDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor \u003d new EditProblemDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder(EditProblemDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.descriptor \u003d new EditProblemDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns an {@code EditProblemDescriptor} with fields containing {@code Problem}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder(Problem problem) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor \u003d new EditProblemDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setName(problem.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setAuthor(problem.getAuthor());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setWebLink(problem.getWebLink());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setDescription(problem.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setTags(problem.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Name} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Author} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code WebLink} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withWeblink(String weblink) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setWebLink(new WebLink(weblink));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Description} of the {@code EditProblemDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditProblemDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public EditProblemDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 87
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/ProblemBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Difficulty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Source;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.WebLink;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class to help with building Problem objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_WEBLINK \u003d \"http://open.kattis.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"3.0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"remark placeholder\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final String DEFAULT_SOURCE \u003d \"UVa\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private WebLink webLink;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    private Source source;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        webLink \u003d new WebLink(DEFAULT_WEBLINK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        source \u003d new Source(DEFAULT_SOURCE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Initializes the ProblemBuilder with the data of {@code problemToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder(Problem problemToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        name \u003d problemToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        author \u003d problemToCopy.getAuthor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        webLink \u003d problemToCopy.getWebLink();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        description \u003d problemToCopy.getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(problemToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        difficulty \u003d problemToCopy.getDifficulty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        remark \u003d problemToCopy.getRemark();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        source \u003d problemToCopy.getSource();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Name} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Problem} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Description} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code Author} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Sets the {@code WebLink} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public ProblemBuilder withWeblink(String weblink) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        this.webLink \u003d new WebLink(weblink);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code Remark} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Sets the {@code Source} of the {@code Problem} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public ProblemBuilder withSource(String source) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        this.source \u003d new Source(source);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public Problem build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new Problem(name, author, webLink, description, tags, difficulty, remark, source);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 41,
      "LuWenQ": 40,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/ProblemUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import static seedu.algobase.logic.parser.CliSyntax.PREFIX_WEBLINK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.logic.commands.EditCommand.EditProblemDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": " * A utility class for Problem."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "public class ProblemUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns an add command string for adding the {@code Problem}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static String getAddCommand(Problem problem) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getProblemDetails(problem);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the part of command string for the given {@code Problem}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static String getProblemDetails(Problem problem) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_NAME + problem.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_AUTHOR + problem.getAuthor().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_WEBLINK + problem.getWebLink().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + problem.getDescription().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        problem.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the part of command string for the given {@code EditProblemDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static String getEditProblemDescriptorDetails(EditProblemDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.getAuthor().ifPresent(author -\u003e sb.append(PREFIX_AUTHOR).append(author.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.getWebLink().ifPresent(weblink -\u003e sb.append(PREFIX_WEBLINK).append(weblink.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 28,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the middle index of the Problem in the {@code model}\u0027s Problem list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProblemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the last index of the Problem in the {@code model}\u0027s Problem list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return Index.fromOneBased(model.getFilteredProblemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "     * Returns the Problem in the {@code model}\u0027s Problem list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static Problem getProblem(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "        return model.getFilteredProblemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "import seedu.algobase.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Index INDEX_FIRST_PROBLEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Index INDEX_SECOND_PROBLEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "    public static final Index INDEX_THIRD_PROBLEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/algobase/testutil/TypicalProblems.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "le0tan"
        },
        "content": "package seedu.algobase.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_AUTHOR_FACTORIAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_AUTHOR_QUICK_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_AUTHOR_TWO_SUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FACTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_QUICK_SORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TWO_SUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DIFFICULTY_FACTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DIFFICULTY_QUICK_SORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_DIFFICULTY_TWO_SUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_FACTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_QUICK_SORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_NAME_TWO_SUM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_REMARK_FACTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_REMARK_QUICK_SORT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_REMARK_TWO_SUM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_SOURCE_FACTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_SOURCE_QUICK_SORT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_SOURCE_TWO_SUM;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_WEBLINK_FACTORIAL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_WEBLINK_QUICK_SORT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import static seedu.algobase.logic.commands.CommandTestUtil.VALID_WEBLINK_TWO_SUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.AlgoBase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "le0tan"
        },
        "content": "import seedu.algobase.model.problem.Problem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "le0tan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "le0tan"
        },
        "content": " * A utility class containing a list of {@code Problem} objects to be used in tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "le0tan"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "le0tan"
        },
        "content": "public class TypicalProblems {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Problem QUICK_SORT \u003d new ProblemBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withName(VALID_NAME_QUICK_SORT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_QUICK_SORT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withAuthor(VALID_AUTHOR_QUICK_SORT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withWeblink(VALID_WEBLINK_QUICK_SORT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withRemark(VALID_REMARK_QUICK_SORT)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withSource(VALID_SOURCE_QUICK_SORT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDifficulty(VALID_DIFFICULTY_QUICK_SORT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withTags(\"Sorting\", \"Recursion\", \"Basics\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Problem TWO_SUM \u003d new ProblemBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withName(VALID_NAME_TWO_SUM)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_TWO_SUM)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withAuthor(VALID_AUTHOR_TWO_SUM)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withWeblink(VALID_WEBLINK_TWO_SUM)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withRemark(VALID_REMARK_TWO_SUM)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withSource(VALID_SOURCE_TWO_SUM)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDifficulty(VALID_DIFFICULTY_TWO_SUM)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static final Problem FACTORIAL \u003d new ProblemBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withName(VALID_NAME_FACTORIAL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDescription(VALID_DESCRIPTION_FACTORIAL)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withAuthor(VALID_AUTHOR_FACTORIAL)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withWeblink(VALID_WEBLINK_FACTORIAL)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withRemark(VALID_REMARK_FACTORIAL)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withSource(VALID_SOURCE_FACTORIAL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .withDifficulty(VALID_DIFFICULTY_FACTORIAL)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     * Returns an{@code AlgoBase} with all typical problems."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "le0tan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static AlgoBase getTypicalAlgoBase() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        AlgoBase algoBase \u003d new AlgoBase();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        for (Problem problem : getTypicalProblems()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "le0tan"
        },
        "content": "            algoBase.addProblem(problem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return algoBase;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "le0tan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    public static List\u003cProblem\u003e getTypicalProblems() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "le0tan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(QUICK_SORT, TWO_SUM, FACTORIAL));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "le0tan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "le0tan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "le0tan": 80
    }
  },
  {
    "path": "src/test/java/seedu/algobase/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "package seedu.algobase.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/invalidFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "Not a valid FXML file"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "le0tan"
        },
        "content": "\u003c!--suppress ALL --\u003e"
      }
    ],
    "authorContributionMap": {
      "le0tan": 1,
      "-": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import seedu.algobase.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003c?import seedu.algobase.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LuWenQ"
        },
        "content": "\u003cfx:root type\u003d\"seedu.algobase.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "LuWenQ": 2,
      "-": 5
    }
  }
]
